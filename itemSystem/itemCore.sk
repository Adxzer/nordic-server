function getSellValue(item: item, amount: number) :: number:

    if {_amount} is not set:
        set {_amount} to 1

    loop lore of {_item}:

        if uncolored loop-value contains "NORMAL", "UNIQUE", "RARE", "EPIC", "SPECIAL" or "LEGENDARY":
            set {_rarity} to uncolored loop-value
    set {_type} to 1st line of lore of {_item}

    if {_rarity} is "NORMAL":
        set {_rarityplier} to 1
    else if {_rarity} is "UNIQUE":
        set {_rarityplier} to 7
    else if {_rarity} is "RARE":
        set {_rarityplier} to 14
    else if {_rarity} is "EPIC":
        set {_rarityplier} to 21
    else if {_rarity} is "SPECIAL":
        set {_rarityplier} to 37
    else if {_rarity} is "LEGENDARY":
        set {_rarityplier} to 56

    if uncolored {_type} contains "Crafting Ingredient":
        set {_typlier} to 1
    else if uncolored {_type} contains "Miscellaneous item" or "Consumable Item":
        set {_typlier} to 3
    else if uncolored {_type} contains "Reforge Stone", "Boss Reward" or "Event Trophie":
        set {_typlier} to 5
    else if uncolored {_type} contains "Damaging Tool", "Archer Tool", "Defense Armor", "Harvesting Tool", "Magical Tool", "Mining Tool", "Travelling Tool" or "Defense Tool":
        set {_typlier} to 8

    if uncolored name of {_item} contains "Wheat", "Seeds", "Potato", "Carrot", "Firework", "Snowball", "Wart", "Gold Nugget", "Ice Shard" or "Berries":
        return 0
    else:
        if {_typlier} is set:
            return {_amount} * ({_typlier} * {_rarityplier})

function checkFuseItem(items: itemtypes) :: string:
    
    set {_itemList::*} to ({items::armorItems::*}, {items::otherItems::*}, {items::reforgeItems::*}, {items::bossItems::*}, {items::dropItems::*}, {items::toolItems::*}, {items::economyItems::*}, {items::consumableItems::*})
    loop {_itemList::*}:
        if uncolored name of loop-value is "Deity Crystal":
            set {_deityCrystal} to loop-value
        else if uncolored name of loop-value is "Teplate Sticks":
            set {_teplateSticks} to loop-value
        else if uncolored name of loop-value is "Teplate Cap":
            set {_teplateCap} to loop-value 
        else if uncolored name of loop-value is "Teplate Tunic":
            set {_teplateTunic} to loop-value 
        else if uncolored name of loop-value is "Teplate Pants":
            set {_teplatePants} to loop-value 
        else if uncolored name of loop-value is "Teplate Boots":
            set {_teplateBoots} to loop-value
        else if uncolored name of loop-value is "Pellucid":
            set {_pellucid} to loop-value
        else if uncolored name of loop-value is "Nature Brace":
            set {_natureBrace} to loop-value
        else if uncolored name of loop-value is "Blemish":
            set {_blemish} to loop-value
    
    loop {_items::*}:
        if uncolored name of loop-value is uncolored name of {_deityCrystal}:
            set {_clear} to true
            
    if {_clear} is true:

        loop {_items::*}:
            if uncolored name of loop-value is uncolored name of {_teplateSticks}:
                set {_tool} to true
            else if uncolored name of loop-value is uncolored name of {_teplateCap}:
                set {_cap} to true
            else if uncolored name of loop-value is uncolored name of {_teplateTunic}:
                set {_tunic} to true
            else if uncolored name of loop-value is uncolored name of {_teplatePants}:
                set {_pants} to true
            else if uncolored name of loop-value is uncolored name of {_teplateBoots}:
                set {_boots} to true

        if {_tool}, {_cap}, {_tunic}, {_pants} or {_boots} is true:

            loop {_items::*}:
                if uncolored name of loop-value is uncolored name of {_pellucid}:
                    set {_mana} to true
                else if uncolored name of loop-value is uncolored name of {_natureBrace}:
                    set {_archer} to true
                else if uncolored name of loop-value is uncolored name of {_blemish}:
                    set {_damage} to true

            if {_mana}, {_damage} or {_archer} is true:

                if {_mana} and {_tool} is true:
                    return "Serrated Staff"
                else if {_mana} and {_cap} is true:
                    return "Serrated Skull"
                else if {_mana} and {_tunic} is true:
                    return "Serrated Tunic"
                else if {_mana} and {_pants} is true:
                    return "Serrated Pants"
                else if {_mana} and {_boots} is true:
                    return "Serrated Boots"
                else if {_archer} and {_tool} is true:
                    return "Heroic Bow"
                else if {_archer} and {_cap} is true:
                    return "Heroic Skull"
                else if {_archer} and {_tunic} is true:
                    return "Heroic Tunic"
                else if {_archer} and {_pants} is true:
                    return "Heroic Pants"
                else if {_archer} and {_boots} is true:
                    return "Heroic Boots"
                else if {_damage} and {_tool} is true:
                    return "Vicious Blade"
                else if {_damage} and {_cap} is true:
                    return "Vicious Skull"
                else if {_damage} and {_tunic} is true:
                    return "Vicious Tunic"
                else if {_damage} and {_pants} is true:
                    return "Vicious Pants"
                else if {_damage} and {_boots} is true:
                    return "Vicious Boots"

    return "none"

function itemGetNewlyUnlocked(level: integer) :: string:

    if {_level} is 2:
        return "<##5EB6B6>- &fBasic Spell"
    else if {_level} is 3:
        return "<##5EB6B6>- &fHarvesting Hoe%nl%<##5EB6B6>- &aZombie Sword%nl%<##5EB6B6>- &aSkeleton Bow"
    else if {_level} is 4:
        return "<##5EB6B6>- &aGhoul Bow%nl%<##5EB6B6>- &aVital Spell"
    else if {_level} is 5:
        return "<##5EB6B6>- &aGhoul Armor%nl%<##5EB6B6>- &aGhoul Sword"
    else if {_level} is 6:
        return "<##5EB6B6>- &aSoiled Hoe%nl%<##5EB6B6>- &9Revenant Bow"
    else if {_level} is 7:
        return "<##5EB6B6>- &aGrime Hoe%nl%<##5EB6B6>- &9Prudent Axe%nl%<##5EB6B6>- &9Orgone Armor"
    else if {_level} is 8:
        return "<##5EB6B6>- &9Mushrew Axe%nl%<##5EB6B6>- &9Crypto Sword%nl%<##5EB6B6>- &9Crypto Armor"
    else if {_level} is 9:
        return "<##5EB6B6>- &9Remedial Armor%nl%<##5EB6B6>- &9Fabled Hoe%nl%<##5EB6B6>- &5Jockey Bow%nl%<##5EB6B6>- &5Ruinous Armor"
    else if {_level} is 11:
        return "<##5EB6B6>- &9Aesir Flinger%nl%<##5EB6B6>- &5Bionic Armor"
    else if {_level} is 12:
        return "<##5EB6B6>- &5Curative Sword"
    else if {_level} is 13:
        return "<##5EB6B6>- &5Transient Flinger%nl%<##5EB6B6>- &5Extract Armor"
    else if {_level} is 14:
        return "<##5EB6B6>- &9Snow Flaker%nl%<##5EB6B6>- &5Dim Bow"
    else if {_level} is 15:
        return "<##5EB6B6>- &5Perish Sword"
    else if {_level} is 16:
        return "<##5EB6B6>- &aRock Shovel"
    else if {_level} is 17:
        return "<##5EB6B6>- &5Binary Spell%nl%<##5EB6B6>- &6Monomial Hoe"
    else if {_level} is 18:
        return "<##5EB6B6>- &9Frost Shovel%nl%<##5EB6B6>- &6Serrated Armor"
    else if {_level} is 19:
        return "<##5EB6B6>- &5Glaze Shovel%nl%<##5EB6B6>- &6Heroic Bow%nl%<##5EB6B6>- &6Vicious Armor"
    else if {_level} is 20:
        return "<##5EB6B6>- &6Heroic Armor%nl%<##5EB6B6>- &6Serrated Staff"
    else if {_level} is 21:
        return "<##5EB6B6>- &6Vicious Blade"
    else if {_level} is 24:
        return "<##5EB6B6>- &6Colossal Shovel"

on rightclick on player:
        
    if uncolored name of player's tool contains "Gift":

        set {_itemList::*} to ({items::armorItems::*}, {items::otherItems::*}, {items::reforgeItems::*}, {items::bossItems::*}, {items::dropItems::*}, {items::toolItems::*}, {items::economyItems::*}, {items::consumableItems::*})
        
        loop {_itemList::*}:
            if uncolored name of loop-value is "Rotten Flesh", "Wheat", "Seeds", "Feather", "Wool", "Red Mushroom", "Brown Mushroom", "String", "Ice Shard" or "Moss Turf":
                add loop-value to {_redGiftList::*}
            else if uncolored name of loop-value is "Egg", "Hay", "Gold Ingot", "Berries", "Green Gift" or "Spikes":
                add loop-value to {_redGiftList::*}
                add loop-value to {_greenGiftList::*}
            else if uncolored name of loop-value is "Lava Web", "Moss Hunk", "Platinum Teeth", "Spider Heart" or "Blue Gift":
                add loop-value to {_greenGiftList::*}
                add loop-value to {_blueGiftList::*}
            else if uncolored name of loop-value is "Living Essence", "Inured Demis", "Twine" or "Firm":
                add loop-value to {_blueGiftList::*}

        set {_players::*} to (player, clicked entity)

        loop 2 times:
            add 1 to {_counter}
            play sound "BLOCK_END_PORTAL_FRAME_FILL" with volume 0.2 to {_players::%{_counter}%}
            play sound "ENTITY_FIREWORK_ROCKET_BLAST" with volume 0.2 to {_players::%{_counter}%}
            play sound "ENTITY_FIREWORK_ROCKET_BLAST_FAR" with volume 0.2 to {_players::%{_counter}%}
            if uncolored name of player's tool contains "Red":
                set {_random} to random integer between 1 and size of {_redGiftList::*}
                set {_amount} to random integer between 3 and 15
                give {_amount} of {_redGiftList::%{_random}%} to {_players::%{_counter}%}
                if {_counter} is 2:
                    send "<##508a7f>[<##5EB6B6>&lGIFT<##508a7f>] » &fYou have received <##5EB6B6>%{_amount}%x %uncolored name of {_redGiftList::%{_random}%}%&f from %player%." to {_players::%{_counter}%}
                else:
                    send "<##508a7f>[<##5EB6B6>&lGIFT<##508a7f>] » &fYou gained <##5EB6B6>%{_amount}%x %uncolored name of {_redGiftList::%{_random}%}%&f from giving a reward to %clicked entity%." to {_players::%{_counter}%}
                    remove 1 of player's tool from player
            else if uncolored name of player's tool contains "Green":
                set {_random} to random integer between 1 and size of {_greenGiftList::*}
                set {_amount} to random integer between 1 and 4
                give {_amount} of {_greenGiftList::%{_random}%} to {_players::%{_counter}%}
                if {_counter} is 2:
                    send "<##508a7f>[<##5EB6B6>&lGIFT<##508a7f>] » &fYou have received <##5EB6B6>%{_amount}%x %uncolored name of {_greenGiftList::%{_random}%}%&f from %player%." to {_players::%{_counter}%}
                else:
                    send "<##508a7f>[<##5EB6B6>&lGIFT<##508a7f>] » &fYou gained <##5EB6B6>%{_amount}%x %uncolored name of {_greenGiftList::%{_random}%}%&f from giving a gift to %clicked entity%." to {_players::%{_counter}%}
                    remove 1 of player's tool from player
            else if uncolored name of player's tool contains "Blue":
                set {_random} to random integer between 1 and size of {_blueGiftList::*}
                set {_amount} to random integer between 1 and 2
                give {_amount} of {_blueGiftList::%{_random}%} to {_players::%{_counter}%}
                if {_counter} is 2:
                    send "<##508a7f>[<##5EB6B6>&lGIFT<##508a7f>] » &fYou have received <##5EB6B6>%{_amount}%x %uncolored name of {_blueGiftList::%{_random}%}%&f from %player%." to {_players::%{_counter}%}
                else:
                    send "<##508a7f>[<##5EB6B6>&lGIFT<##508a7f>] » &fYou gained <##5EB6B6>%{_amount}%x %uncolored name of {_blueGiftList::%{_random}%}%&f from giving a gift to %clicked entity%." to {_players::%{_counter}%}
                    remove 1 of player's tool from player

on fishing:

    if uncolored name of player's tool is "Snow Flaker":

        if {ability::fling::%player's uuid%} is not set:
            set {ability::fling::%player's uuid%} to 0 seconds

        if difference between now and {ability::fling::%player's uuid%} is less than 3 seconds:

            cancel event
            send action bar coreGetActionBar(player, "&cThis item has a cooldown!") to player

        else:
            
            if {level::%player's uuid%} >= 14:
                
                if {mana::currentMana::%player's uuid%} >= 4:

                    if "%fish state%" is "caught" or "reel in" or "in ground":

                        set {_ploc.x} to x coordinate of player
                        set {_floc.x} to x coordinate of fishing hook
                        set {_ang} to {_floc.x} - {_ploc.x}
                        set {_ploc.z} to z coordinate of player
                        set {_floc.z} to z coordinate of fishing hook
                        set {_ang.2} to {_floc.z} - {_ploc.z}
                        set velocity of player to new Vector {_ang}, 1, {_ang.2}
                        send action bar coreGetActionBar(player, "&6You used Fling!") to player
                        remove 4 from {mana::currentMana::%player's uuid%}
                        set {ability::fling::%player's uuid%} to now

                else:
                    set {actionBarSet::%{_u}%} to true
                    send action bar coreGetActionBar(player, "&cNot enough mana!") to player
                    wait 1 second
                    set {actionBarSet::%{_u}%} to false
                    stop trigger

            else:
                set {actionBarSet::%{_u}%} to true
                send action bar coreGetActionBar(player, "&cNot required level!") to player
                wait 1 second
                set {actionBarSet::%{_u}%} to false
                stop trigger

on rightclick:

    if uncolored name of player's tool is "Firework":   

        if {firework::cooldown::%player's uuid%} is not set:
            set {firework::cooldown::%player's uuid%} to 0 seconds

        if difference between now and {firework::cooldown::%player's uuid%} is less than 4 seconds:
            send action bar coreGetActionBar(player, "&cThis item has a cooldown!") to player
            
        else:
            remove 1 of player's tool from player
            launch trailing flickering star coloured purple, yellow, blue, green and red fading to pink at player
            set {firework::cooldown::%player's uuid%} to now
                  

command /item [<text>] [<text>] [<text>] [<text>] [<text>] [<text>]:
    permission: skript.admin
    permission message: Unknown command. Type "/help" for help.
    trigger:

        if arg-1 is set:

            if arg-1 is "user":
     
                if arg-2 is set:

                    if arg-2 parsed as offline player is offline player:

                        set {_player} to arg-2 parsed as offline player
                        set {_u} to uuid of {_player}

                        if {level::%{_u}%} is set:

                            if arg-3 is set:

                                if arg-3 is "give" or "take":

                                    if arg-4 is set:

                                        if arg-4 is "economy", "drop", "other", "boss", "reforge", "tool", "consumable" or "armor":

                                            if arg-5 is set:

                                                loop {items::%arg-4%Items::*}:
                                                    set {_split::*} to uncolored name of loop-value split at " "
                                                    if {_split::2} is set:
                                                        set {_name} to "%{_split::1} in lower case%%{_split::2}%"
                                                    else:
                                                        set {_name} to {_split::1} in lower case
                                                    if arg-5 is {_name}:
                                                        set {_item} to true
                                                        set {_give} to loop-value
                                                        stop loop

                                                if {_item} is true:

                                                    if arg-6 is set:

                                                        set {_amount} to arg-6 parsed as integer

                                                        if arg-6 parsed as integer is integer:

                                                            if arg-3 is "give":
                                                                give {_player} {_amount} of {_give}
                                                                send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &fYou gave <##5EB6B6>%arg-6%x %uncolored name of {_give}%&f to <##5EB6B6>%arg-2%&f."
                                                            else if arg-3 is "take":

                                                                loop player's inventory:
                                                                    if loop-value's type is {_give}'s type:
                                                                        set {_contains} to true
                                                                        stop loop

                                                                if {_contains} is true:                            
                                                                    remove {_amount} of {_give} from {_player} 
                                                                    send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &fYou took <##5EB6B6>%arg-6%x %uncolored name of {_give}%&f from <##5EB6B6>%arg-2%&f."

                                                                else:
                                                                    send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &cThe player does not have this item."
                                                                                                    
                                                            else:
                                                                send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &cThis command option does not exist." 

                                                    else if arg-6 is not set:

                                                        if arg-3 is "give":
                                                            give {_player} {_give}
                                                            send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &fYou gave <##5EB6B6>1x %uncolored name of {_give}%&f to <##5EB6B6>%arg-2%&f."
                                                        else if arg-3 is "take":

                                                            loop player's inventory:
                                                                if loop-value's type is {_give}'s type:
                                                                    set {_contains} to true
                                                                    stop loop

                                                            if {_contains} is true:                            
                                                                remove {_give} from {_player} 
                                                                send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &fYou took <##5EB6B6>1x %uncolored name of {_give}%&f from <##5EB6B6>%arg-2%&f."

                                                            else:
                                                                send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &cThe player does not have this item."
                                                                                                    
                                                        else:
                                                            send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &cThis command option does not exist."  
                                                                
                                                    else:
                                                        send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &cThis command option does not exist."   

                                                else:
                                                    send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &cThis item does not exist."
                                                    
                                            else:
                                                send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &cPlease specify an item."

                                        else:
                                            send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &cThis command option does not exist."

                                    else:
                                        send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &cPlease specify a command option."

                                else:
                                    send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &cThis command option does not exist."

                            else:
                                send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &cPlease specify a command option."

                        else:
                            send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &cThis player has never been on the server."

                    else:
                        send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &cThis player does not exist."

                else:
                    send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &cPlease specify a player."  

            else:
                send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &cThis command option does not exist."

        else:
            send "<##508a7f>[<##5EB6B6>&lITEM<##508a7f>] » &cPlease specify a command option."

on tab complete of "/item":

    if tab arg-1 is not "user": # add new options  
        clear {_tabCompletion::*}
        set {_tabCompletion::*} to ("user") # add new options
        set tab completions for position 1 to {_tabCompletion::*}

    if tab arg-1 is "user":
        clear {_tabCompletion::*}
        loop players:
            add loop-value to {_tabCompletion::*}
            set tab completions for position 2 to {_tabCompletion::*}

    set {_user} to tab arg-2 parsed as offline player
    set {_u} to uuid of {_user}
    if {level::%{_u}%} is set:

        if tab arg-3 is not "give" or "take": # add new options 
            clear {_tabCompletion::*}
            set {_tabCompletion::*} to ("give", "take") # add new options 
            set tab completions for position 3 to {_tabCompletion::*}

    set {_categories::*} to ("economy", "drop", "boss", "other", "reforge", "tool", "armor", "consumable") # add new categories 
    if tab arg-3 is "give" or "take":
        set tab completions for position 4 to {_categories::*} 
    loop {_categories::*}:
        if tab arg-4 is loop-value:
            set {_item} to true
    
    if {_item} is true:
        clear {_tabCompletion::*}
        set {_category} to tab arg-4
        loop {items::%{_category}%Items::*}:
            set {_split::*} to uncolored name of loop-value split at " "
            if {_split::2} is set:
                set {_name} to "%{_split::1} in lower case%%{_split::2}%"
            else:
                set {_name} to {_split::1} in lower case
            add {_name} to {_tabCompletion::*}
        set tab completions for position 5 to {_tabCompletion::*}