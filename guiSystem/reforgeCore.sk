function reforgeCreateInterface(player: player, name: string):

    set metadata tag "reforge" of {_player} to chest with 6 row named "%{_name}%"
    
    set {_u} to uuid of {_player}
    set {_borderIndex} to 0

    loop 54 times:

        if {_borderIndex} is not 13 or 40:
            set slot {_borderIndex} of metadata tag "reforge" of {_player} to black stained glass pane named "&8Border"

        if {_borderIndex} is 10, 16, 19, 25, 28, 34, 37 or 43:
            set slot {_borderIndex} of metadata tag "reforge" of {_player} to gray stained glass pane named "&7Border"

        if {_borderIndex} is 31:
            set slot {_borderIndex} of metadata tag "reforge" of {_player} to anvil named "&fReforge Item" with lore "&7Click your items to insert", "&7them and reforge them.", "", "&cNot a valid reforge!"

        if {_borderIndex} is 32:
            set slot {_borderIndex} of metadata tag "reforge" of {_player} to arrow named "&fShop" with lore "&7Visit the reforge stone", "&7shop by clicking here.", "", "&eView (Right Click)"

        add 1 to {_borderIndex}

    open (metadata tag "reforge" of {_player}) to {_player}

function reforgeGetValidInput(tool: item, stone: item) :: string:
    
    if uncolored name of {_tool} contains "Shovel":

        if uncolored name of {_tool} does not contain "Ravishing":

            if uncolored name of {_stone} is "Icicle Stone":
                return "Ravishing:Ore 2"
            else if uncolored name of {_stone} is "Refined Stone":

                if uncolored name of {_tool} is "Frost Shovel" or "Glaze Shovel":
                    return "Refined:Ore 5"
        
    if uncolored name of {_tool} contains "Hoe":

        if uncolored name of {_tool} does not contain "Charming":

            if uncolored name of {_stone} is "Charming Stone":
                return "Charming:Crops 3"
    
    if uncolored name of {_tool} contains "Bionic":

        if uncolored name of {_tool} does not contain "Swift":

            if uncolored name of {_stone} is "Swift Stone":
                return "Swift:Speed 1"

    if uncolored name of {_tool} contains "Skull", "Tunic", "Pants", "Boots", "Chestplate", "Pants" or "Leggings":

        if uncolored name of {_tool} does not contain "Wise" or "Bulky":

            if uncolored name of {_tool} does not contain "Extract":

                if uncolored name of {_stone} is "Bulky Stone":
                    return "Bulky:Health 8"
            
            if uncolored name of {_tool} contains "Crypto", "Remedial", "Ruinous", "Vicious", "Serrated", "Bionic" or "Bionic":

                if uncolored name of {_stone} is "Wise Stone":
                    return "Wise:Mana 6"

    if uncolored name of {_tool} contains "Sword", "Blade", "Bow", "Staff", "Spell", "Flinger" or "Axe":

        if uncolored name of {_tool} does not contain "Gentle":

            if uncolored name of {_stone} is "Gentle Stone":
                return "Gentle:Damage 7"

    return "none"

function reforgeGetLore(player: player, tool: item, stone: item):

    set {_max} to size of lore of slot 31 of {_player}'s current inventory
    set {_boundItem} to reforgeGetValidInput({_tool}, {_stone})
    if {_boundItem} is not "none":

        set {_max} to size of lore of {_tool}
        set {_rarity} to uncolored {_max}th line of lore of {_tool}

        if {_rarity} is "NORMAL":
            set {_cost} to 64
        else if {_rarity} is "UNIQUE":
            set {_cost} to 256
        else if {_rarity} is "RARE":
            set {_cost} to 512
        else if {_rarity} is "EPIC":
            set {_cost} to 1024
        else if {_rarity} is "LEGENDARY":
            set {_cost} to 2048

        clear lore of slot 31 of {_player}'s current inventory
        add "&7Click your items to insert", "&7them and reforge them.", "", "&7Cost: &a$%{_cost}%", "" and "&eReforge (Right Click)" to lore of slot 31 of {_player}'s current inventory
    else:
        clear lore of slot 31 of {_player}'s current inventory
        set lore of slot 31 of {_player}'s current inventory to "&7Click your items to insert", "&7them and reforge them.", "" and "&cNot a valid reforge!"

on inventory click:

    if uncolored name of player's current inventory contains "Reforger":
        cancel event
    
        if event-inventory = (metadata tag "reforge" of player):

            if index of event-slot is 40 or 13:

                set {_item} to event-slot
                set event-slot to air
                give player {_item}
                reforgeGetLore(player, slot 13 of player's current inventory, slot 40 of player's current inventory)

            if index of event-slot is 32:

                set {_itemList::*} to ({items::reforgeItems::*})

                loop {_itemList::*}:
                    if uncolored name of loop-value is "Bulky Stone":
                        set {_bulkyStone} to loop-value
                    else if uncolored name of loop-value is "Wise Stone":
                        set {_wiseStone} to loop-value
                    else if uncolored name of loop-value is "Icicle Stone":
                        set {_icicleStone} to loop-value

                guiCreateMerchant(player, "&8Reforge Shop", ({_bulkyStone}, {_wiseStone}, {_icicleStone}), ("buy", "buy", "buy"), (768, 1024, 1664, 1664), ("&8- &7248x Rotten Flesh:&8- &77x Platinum Teeth", "&8- &784x Web", "&8- &75x Frozen Ice"))

            if index of event-slot is 31:

                set {_boundItem} to reforgeGetValidInput(slot 13 of player's current inventory, slot 40 of player's current inventory)
                if {_boundItem} is not "none":

                    set {_cost::*} to 4th line of lore of slot 31 of player's current inventory split at "$"
                    set {_cost} to {_cost::2} parsed as integer

                    loop player's inventory:
                        if loop-value is emerald block:
                            add item amount of loop-value to {_gemstone}
                            add 64 * item amount of loop-value to {_money}
                        else if loop-value is emerald:
                            add item amount of loop-value to {_emerald}
                            add item amount of loop-value to {_money}

                    if {_cost} is not set:
                        set {_cost} to 0
                    if {_money} is not set:
                        set {_money} to 0

                    if {_money} is greater than or equal to {_cost}:
                        
                        loop player's inventory:

                            if {_cost} is greater than 0:

                                if loop-value is emerald block or emerald:

                                    if {_gemstone} is greater than or equal to {_cost} / 64:

                                        if {_cost} is less than 64:
                                            if {_emerald} is greater than or equal to {_cost}:
                                                remove {_cost} of emerald from player's inventory
                                                stop loop
                                            else:
                                                set {_give} to 64 - {_cost}
                                                remove 1 of emerald block from player's inventory
                                                give {_give} of {items::economyItems::1} to player
                                                stop loop
                                        else:
                                            remove {_cost} / 64 of emerald block from player's inventory
                                            remove {_gemstone} * 64 from {_cost}
                                    else:

                                        remove {_gemstone} of emerald block from player's inventory
                                        remove {_gemstone} * 64 from {_cost}

                                        if {_emerald} is greater than or equal to {_cost}:
                                            remove {_cost} of emerald from player's inventory
                                            remove {_emerald} from {_cost}

                        set {_item} to slot 13 of player's current inventory
                        set {_lore::*} to lore of {_item}
                        
                        set {_split::*} to split {_boundItem} at ":"
                        set {_attributes::*} to split {_split::2} at " "
                        set {_name} to {_split::1}

                        loop {_lore::*}:
                            add 1 to {_counter}
                            if loop-value contains {_attributes::1}:
                                set {_counter}th line of lore of {_item} to "%loop-value% &8(%{_name}% +%{_attributes::2}%)"
                                stop loop
                        set name of {_item} to "%first 2 characters of name of {_item}%%{_name}% %name of {_item}%"

                        remove 1 of slot 40 of player's current inventory from slot 40 of player's current inventory
                        remove 1 of slot 13 of player's current inventory from slot 13 of player's current inventory
                        give player 1 of {_item}
                        reforgeGetLore(player, slot 13 of player's current inventory, slot 40 of player's current inventory)
                        play sound "ENTITY_FIREWORK_ROCKET_BLAST" with volume 0.2 to player
                        play sound "BLOCK_BEACON_POWER_SELECT" with volume 0.2 to player
                        play sound "ENTITY_ANVIL_USE" with volume 0.2 to player

        else:

            if event-slot is not air or arrow:

                set {_item} to event-slot                    
                set {_counter} to 1
                set {_numbers::*} to 40, 13

                loop 2 times:

                    if slot {_numbers::%{_counter}%} of player's current inventory is air:

                        set event-slot to air
                        set slot {_numbers::%{_counter}%} of player's current inventory to {_item}
                        reforgeGetLore(player, slot 13 of player's current inventory, slot 40 of player's current inventory)
                        stop loop

                    else:
                        add 1 to {_counter}

on inventory close:

    if event-inventory = (metadata tag "reforge" of player): 

        if slot 13 of player's current inventory is not air:
            give player slot 13 of player's current inventory
        if slot 40 of player's current inventory is not air:
            give player slot 40 of player's current inventory
