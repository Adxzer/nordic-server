function guiCreateMerchant(player: player, name: string, items: itemtypes, type: strings, cost: strings):

    set metadata tag "merchant" of {_player} to chest with 6 row named "%{_name}%"
    
    set {_u} to uuid of {_player}
    set {_borderIndex} to 0
    set {_itemIndex} to 0
    set {_currentIndex} to 1

    loop 54 times:

        if {_borderIndex} is not 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 38, 39, 40, 41 or 42:
            set slot {_borderIndex} of metadata tag "merchant" of {_player} to black stained glass pane named "&8Border"

        if {_borderIndex} is 10, 16, 19, 25, 28, 34, 37 or 43:
            set slot {_borderIndex} of metadata tag "merchant" of {_player} to gray stained glass pane named "&7Border"

        add 1 to {_borderIndex}

        if {_itemIndex} is 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 38, 39, 40, 41 or 42:

            add "" to lore of {_items::%{_currentIndex}%}

            if {_type::%{_currentIndex}%} is "sell":
                add "&7&nSell For:" to lore of {_items::%{_currentIndex}%}
            else if {_type::%{_currentIndex}%} is "buy":
                add "&7&nBuy For:" to lore of {_items::%{_currentIndex}%}
                
            set {_price::*} to split {_cost::%{_currentIndex}%} at ":"
            add {_price::*} to lore of {_items::%{_currentIndex}%}
            add "&6" to lore of {_items::%{_currentIndex}%}

            if {_type::%{_currentIndex}%} is "sell":
                add "&eSell (Left Click)" to lore of {_items::%{_currentIndex}%}
            else if {_type::%{_currentIndex}%} is "buy":
                add "&eBuy (Left Click)" to lore of {_items::%{_currentIndex}%}

            if max stack size of {_items::%{_currentIndex}%} > 1:
                if {_items::%{_currentIndex}%} is not player skull, zombie head or creeper head:
                    add "&eOptions (Right Click)" to lore of {_items::%{_currentIndex}%}

            set slot {_itemIndex} of metadata tag "merchant" of {_player} to {_items::%{_currentIndex}%}

            add 1 to {_currentIndex}

        add 1 to {_itemIndex}

    questTalk({_player})
    open (metadata tag "merchant" of {_player}) to {_player}

function guiMerchantOptions(player: player, name: string, item: item, type: string):

    set metadata tag "options" of {_player} to chest with 5 row named "%{_name}%"

    set {_u} to uuid of {_player}
    set {_borderIndex} to 0
    set {_itemIndex} to 0
    set {_currentIndex} to 1
    set {_loreIndex} to 1

    set {_lore::*} to {_item}'s lore
    set {_size} to size of {_item}'s lore
    set {_change} to {_size} - 1
    clear {_size}th line of lore of {_item}

    loop {_lore::*}:
        if loop-value contains "(Left Click)":
            set {_type::*} to split loop-value at " "
            stop loop

        if uncolored loop-value contains "For":
            set {_loreItemOneIndex} to {_loreIndex} + 1
            set {_loreItemTwoIndex} to {_loreIndex} + 2
            set {_loreItemThreeIndex} to {_loreIndex} + 3
    
        add 1 to {_loreIndex}

    set {_splitOne::*} to uncolored split {_loreItemOneIndex}th line of lore of {_item} at "x "
    set {_itemOne::*} to uncolored split {_splitOne::1} at " "
    set {_itemOneNumber} to {_itemOne::2} parsed as integer

    set {_splitTwo::*} to uncolored split {_loreItemTwoIndex}th line of lore of {_item} at "x "
    set {_itemTwo::*} to uncolored split {_splitTwo::1} at " "
    set {_itemTwoNumber} to {_itemTwo::2} parsed as integer

    set {_splitThree::*} to uncolored split {_loreItemThreeIndex}th line of lore of {_item} at "x "
    set {_itemThree::*} to uncolored split {_splitThree::1} at " "
    set {_itemThreeNumber} to {_itemThree::2} parsed as integer

    loop 54 times:

        if {_borderIndex} is not 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 29, 30, 31, 32 or 33:
            set slot {_borderIndex} of metadata tag "options" of {_player} to black stained glass pane named "&8Border"

        if {_borderIndex} is 10, 16, 19, 25, 28 or 34:
            set slot {_borderIndex} of metadata tag "options" of {_player} to gray stained glass pane named "&7Border"

        if {_borderIndex} is 31:
            set slot {_borderIndex} of metadata tag "options" of {_player} to barrier named "&cClose"

        add 1 to {_borderIndex}

        if {_itemIndex} is 11:

            set {_change}th line of lore of {_item} to "%{_type::1}% 1x (Left Click)"
            set {_loreItemOneIndex}th line of lore of {_item} to "&8- &7%item amount of {_item} * {_itemOneNumber}%x %{_splitOne::2}%"

            if uncolored {_loreItemTwoIndex}th line of lore of {_item} is not "":
                set {_loreItemTwoIndex}th line of lore of {_item} to "&8- &7%item amount of {_item} * {_itemTwoNumber}%x %{_splitTwo::2}%"
            
            if {_loreItemThreeIndex}th line of lore of {_item} is not "%{_type::1}% 1x (Left Click)" or "":
                if "&8- &7%item amount of {_item} * {_itemThreeNumber}%x %{_splitThree::2}%" contains "0x":
                    set {_loreItemThreeIndex}th line of lore of {_item} to ""
                else:
                    set {_loreItemThreeIndex}th line of lore of {_item} to "&8- &7%item amount of {_item} * {_itemThreeNumber}%x %{_splitThree::2}%"

            set slot {_itemIndex} of metadata tag "options" of {_player} to {_item}
        else if {_itemIndex} is 12:
            set {_item} to 4 of {_item}

            set {_change}th line of lore of {_item} to "%{_type::1}% 4x (Left Click)"
            set {_loreItemOneIndex}th line of lore of {_item} to "&8- &7%item amount of {_item} * {_itemOneNumber}%x %{_splitOne::2}%"

            if uncolored {_loreItemTwoIndex}th line of lore of {_item} is not "":
                set {_loreItemTwoIndex}th line of lore of {_item} to "&8- &7%item amount of {_item} * {_itemTwoNumber}%x %{_splitTwo::2}%"
            
            if {_loreItemThreeIndex}th line of lore of {_item} is not "%{_type::1}% 4x (Left Click)" or "":
                if "&8- &7%item amount of {_item} * {_itemThreeNumber}%x %{_splitThree::2}%" contains "0x":
                    set {_loreItemThreeIndex}th line of lore of {_item} to ""
                else:
                    set {_loreItemThreeIndex}th line of lore of {_item} to "&8- &7%item amount of {_item} * {_itemThreeNumber}%x %{_splitThree::2}%"

            set slot {_itemIndex} of metadata tag "options" of {_player} to {_item}
        else if {_itemIndex} is 13:
            set {_item} to 16 of {_item}

            set {_change}th line of lore of {_item} to "%{_type::1}% 16x (Left Click)"
            set {_loreItemOneIndex}th line of lore of {_item} to "&8- &7%item amount of {_item} * {_itemOneNumber}%x %{_splitOne::2}%"

            if uncolored {_loreItemTwoIndex}th line of lore of {_item} is not "":
                set {_loreItemTwoIndex}th line of lore of {_item} to "&8- &7%item amount of {_item} * {_itemTwoNumber}%x %{_splitTwo::2}%"
            
            if {_loreItemThreeIndex}th line of lore of {_item} is not "%{_type::1}% 16x (Left Click)" or "":
                if "&8- &7%item amount of {_item} * {_itemThreeNumber}%x %{_splitThree::2}%" contains "0x":
                    set {_loreItemThreeIndex}th line of lore of {_item} to ""
                else:
                    set {_loreItemThreeIndex}th line of lore of {_item} to "&8- &7%item amount of {_item} * {_itemThreeNumber}%x %{_splitThree::2}%"

            set slot {_itemIndex} of metadata tag "options" of {_player} to {_item}
        else if {_itemIndex} is 14:
            set {_item} to 32 of {_item}

            set {_change}th line of lore of {_item} to "%{_type::1}% 32x (Left Click)"
            set {_loreItemOneIndex}th line of lore of {_item} to "&8- &7%item amount of {_item} * {_itemOneNumber}%x %{_splitOne::2}%"

            if uncolored {_loreItemTwoIndex}th line of lore of {_item} is not "":
                set {_loreItemTwoIndex}th line of lore of {_item} to "&8- &7%item amount of {_item} * {_itemTwoNumber}%x %{_splitTwo::2}%"
            
            if {_loreItemThreeIndex}th line of lore of {_item} is not "%{_type::1}% 32x (Left Click)" or "":
                if "&8- &7%item amount of {_item} * {_itemThreeNumber}%x %{_splitThree::2}%" contains "0x":
                    set {_loreItemThreeIndex}th line of lore of {_item} to ""
                else:
                    set {_loreItemThreeIndex}th line of lore of {_item} to "&8- &7%item amount of {_item} * {_itemThreeNumber}%x %{_splitThree::2}%"

            set slot {_itemIndex} of metadata tag "options" of {_player} to {_item}
        else if {_itemIndex} is 15:       
            set {_item} to 64 of {_item}

            set {_change}th line of lore of {_item} to "%{_type::1}% 64x (Left Click)"
            set {_loreItemOneIndex}th line of lore of {_item} to "&8- &7%item amount of {_item} * {_itemOneNumber}%x %{_splitOne::2}%"

            if uncolored {_loreItemTwoIndex}th line of lore of {_item} is not "":
                set {_loreItemTwoIndex}th line of lore of {_item} to "&8- &7%item amount of {_item} * {_itemTwoNumber}%x %{_splitTwo::2}%"
            
            if {_loreItemThreeIndex}th line of lore of {_item} is not "%{_type::1}% 64x (Left Click)" or "":
                if "&8- &7%item amount of {_item} * {_itemThreeNumber}%x %{_splitThree::2}%" contains "0x":
                    set {_loreItemThreeIndex}th line of lore of {_item} to ""
                else:
                    set {_loreItemThreeIndex}th line of lore of {_item} to "&8- &7%item amount of {_item} * {_itemThreeNumber}%x %{_splitThree::2}%"

            set slot {_itemIndex} of metadata tag "options" of {_player} to {_item}
            
        add 1 to {_itemIndex}


    open (metadata tag "options" of {_player}) to {_player}

function guiCreateBank(player: player, target: offline player, name: string, number: integer):

    if {_player} is {_target}:
        set metadata tag "bank" of {_player} to chest with 6 row named "%{_name}% Page %{_number}%"
    else:
        set metadata tag "bank" of {_player} to chest with 6 row named "%{_name}% Page %{_number}% (%{_target}%)"

    set {_u} to uuid of {_target}
    set {previousBank::%{_u}%} to {_name}
    set {_borderIndex} to 0
    set {_slot} to 0
    set {_start} to {_number}

    loop 35 times:
        set slot {_slot} of metadata tag "bank" of {_player} to {bank::%{_start}%::%{_slot}%::%{_u}%}
        add 1 to {_slot}

    set {_value} to 0

    loop {_player}'s inventory:
        if type of loop-value is emerald:
            add item amount of loop-value to {_value}
    set {_value} to floor({_value} / 64)

    if {_number} > 1:
        set {_showPrevious} to true
    else:
        set {_showPrevious} to false

    if {_number} < 9:
        set {_showNext} to true
    else:
        set {_showNext} to false

    loop 54 times:

        if {_borderIndex} > 35:
            set slot {_borderIndex} of metadata tag "bank" of {_player} to black stained glass pane named "&8Border"

        if {_borderIndex} is 46:
            set slot {_borderIndex} of metadata tag "bank" of {_player} to emerald named "&aGemstone Decompressor" with lore "&7Decompress your gemstone.", "", "&7&nDecompress For:", "&8- &764x Emerald", "" and "&eDecompress (Left Click)"
        
        if {_borderIndex} is 47:
            set slot {_borderIndex} of metadata tag "bank" of {_player} to emerald block named "&aEmerald Compressor" with lore "&7Compress your emeralds.", "", "&7&nCompress For:", "&8- &71x Gemstone", "" and "&eCompress (Left Click)"
        
        if {_borderIndex} is 48:
            set slot {_borderIndex} of metadata tag "bank" of {_player} to chest named "&aInventory Compressor" with lore "&7Compress your inventory.", "", "&7&nCompress For:", "&8- &7%{_value}%x Gemstone", "" and "&eCompress (Left Click)"
        
        if {_borderIndex} is 50:

            if {_showPrevious} is true:
                set slot {_borderIndex} of metadata tag "bank" of {_player} to arrow named "&fPage %{_number} - 1%" with lore "&7Open the previous page of", "&7your bank storage.", "" and "&ePrevious (Left Click)"

        if {_borderIndex} is 51:
            set slot {_borderIndex} of metadata tag "bank" of {_player} to barrier named "&cClose"
        
        if {_borderIndex} is 52:

            if {_showNext} is true:
                set slot {_borderIndex} of metadata tag "bank" of {_player} to arrow named "&fPage %{_number} + 1%" with lore "&7Open the next page of", "&7your bank storage.", "" and "&eNext (Left Click)"
        add 1 to {_borderIndex}

    questTalk({_player})
    open (metadata tag "bank" of {_player}) to {_player}

function guiCreateItemBuyer(player: player, name: string):

    set {_u} to uuid of {_player}

    set metadata tag "buyer" of {_player} to chest with 1 row named "%{_name}%"
    set slot 8 of metadata tag "buyer" of {_player} to composter named "&fSell Items" with lore "&7Currently no items, add", "&7items to sell them.", "" and "&cEmpty grid!"

    questTalk({_player})
    open (metadata tag "buyer" of {_player}) to {_player}

function guiCreateItemFuser(player: player, name: string):

    set metadata tag "fuser" of {_player} to chest with 5 row named "%{_name}%"
    
    set {_u} to uuid of {_target}
    set {_borderIndex} to 0

    loop 45 times:

        if {_borderIndex} is 10, 19 or 28:
            set slot {_borderIndex} of metadata tag "fuser" of {_player} to gray stained glass pane named "&7Border"
        else:

            if {_borderIndex} is 25:
                set slot {_borderIndex} of metadata tag "fuser" of {_player} to lodestone named "&bFuse Items" with lore "&7Insert items in the grid", "&7below to create a new item.", "", and "&cNot a valid recipe!"
            
            if {_borderIndex} is not 21, 22, 23 or 25:
                set slot {_borderIndex} of metadata tag "fuser" of {_player} to black stained glass pane named "&8Border"

        add 1 to {_borderIndex}

    questTalk({_player})
    open (metadata tag "fuser" of {_player}) to {_player}

function guiEditItemLore(player: player):

    clear lore of slot 8 of {_player}'s current inventory
    set 1th line of lore of slot 8 of {_player}'s current inventory to "&7To sell the grid items"
    set 2th line of lore of slot 8 of {_player}'s current inventory to "&7click on this composter."
    set 4th line of lore of slot 8 of {_player}'s current inventory to "&7&nItems:"

    set {_counter2} to 0
    loop 8 times:
        set {_item2} to slot {_counter2} of {_player}'s current inventory
        set {_value2} to getSellValue({_item2}, item amount of {_item2})
        if {_value2} is set:
            if item amount of {_item2} is greater than 1:
                if {_value2} > 0:
                    add "&7%item amount of {_item2}%x %uncolored name of {_item2}% &7(&a%{_value2}%$&7)" to lore of slot 8 of {_player}'s current inventory
                else:
                    add "&7%item amount of {_item2}%x %uncolored name of {_item2}% &7(&cTRASH&7)" to lore of slot 8 of {_player}'s current inventory
            else:
                if {_value2} > 0:
                    add "&7%uncolored name of {_item2}% &7(&a%{_value2}%$&7)" to lore of slot 8 of {_player}'s current inventory
                else:
                    add "&7%uncolored name of {_item2}% &7(&cTRASH&7)" to lore of slot 8 of {_player}'s current inventory
        add 1 to {_counter2}

    add "" to lore of slot 8 of {_player}'s current inventory
    add "&eSell (Left Click)" to lore of slot 8 of {_player}'s current inventory

function guiCheckItemLore(player: player):

    set {_counter} to 0
    loop 8 times:
        if slot {_counter} of {_player}'s current inventory is not air:
            guiEditItemLore({_player})
            set {_empty} to false
            stop loop
        add 1 to {_counter}
                
    if {_empty} is not false:
        clear lore of slot 8 of {_player}'s current inventory
        set lore of slot 8 of {_player}'s current inventory to "&7Currently no items, add", "&7items to sell them.", "" and "&cEmpty grid!"

on rightclick:

    if uncolored name of event-item is "Remote Menu":
    
        set metadata tag "menu" of player to chest with 6 row named "&8Remote Menu"
        
        set {_u} to uuid of player
        set {_borderIndex} to 0
        
        loop 54 times:

            if {_borderIndex} is not 10, 13, 16, 19, 25, 28, 31, 34, 37, 39, 41 or 43:
                set slot {_borderIndex} of metadata tag "menu" of player to black stained glass pane named "&8Border"

            set {_next} to 25 * ({level::%player's uuid%} * {level::%player's uuid%}) + 175 * {level::%player's uuid%}
            set {_functionValue} to "%{xp::%player's uuid%}%/%{_next}%"
            if {_borderIndex} is 13:

                set {_placeItem} to ("%player%" parsed as offline player)'s head named "&aYour Stats" with lore "&7View your current stats and the", "&7experience you require to level up.", "", "&7Health: &c%coreRoundTo({health::currentHearts::%{_u}%}, 1)%/%{health::maxHearts::%{_u}%}%❤" and "&7Mana: &6%coreRoundTo({mana::currentMana::%{_u}%}, 1)%/%{mana::maxMana::%{_u}%}%✦" and ""
                if {boost::luck::%{_u}%} or {boost::experience::%{_u}%} is greater than 0:

                    add "&7Boost:" to lore of {_placeItem}
                    if {boost::experience::%{_u}%} is greater than 0:
                        add "&d» &7Experience (&d%round({boost::experience::%{_u}%} / 60)% min&7)" to lore of {_placeItem}
                    if {boost::luck::%{_u}%} is greater than 0:
                        add "&d» &7Luck (&d%round({boost::luck::%{_u}%} / 60)% min&7)" to lore of {_placeItem}
                    add "" to lore of {_placeItem}

                add "&7Level: &3⚗%{level::%{_u}%}%", coreReturnCharacterBar(player, {_functionValue}) and coreGetLevelBar(player) to lore of {_placeItem}

                set slot {_borderIndex} of metadata tag "menu" of player to {_placeItem}



            if {_borderIndex} is 31:
                set slot {_borderIndex} of metadata tag "menu" of player to diamond named "&aStore" with lore "&7The primary way to support the development", "&7of the server and the expantion of the game.", "" and "&eView (Left Click)"

            if {_borderIndex} is 39 or 41:
                if player has permission "skript.rank":
                    if {_borderIndex} is 39:
                        set slot {_borderIndex} of metadata tag "menu" of player to chest named "&aBank" with lore "&7Access your remote bank to store", "&7your items and convert emeralds.", "" and "&eView (Left Click)"
                    else if {_borderIndex} is 41:
                        set slot {_borderIndex} of metadata tag "menu" of player to compass named "&aTeleport" with lore "&7While not in combat this menu gives", "&7you instant access to all the parts of the map.", "" and "&eView (Left Click)"
                else:
                    set slot {_borderIndex} of metadata tag "menu" of player to gray dye named "&fNo Access" with lore "&7You currently lack access to this feature and", "&7you can unlock it by supporting the server.", "" and "&cInherit permissions!"

            if {_borderIndex} is 10, 16, 19, 25, 28, 34, 37 or 43:
                set slot {_borderIndex} of metadata tag "menu" of player to gray stained glass pane named "&7Border"


            add 1 to {_borderIndex}


        open (metadata tag "menu" of player) to player

on inventory click:

    if event-inventory = (metadata tag "bank" of player): 

        if index of event-slot > 35:
            cancel event

            loop ({items::economyItems::*}):
                if uncolored name of loop-value is "Emerald":
                    set {_emerald} to loop-value
                else if uncolored name of loop-value is "Gemstone":
                    set {_gemstone} to loop-value

            if index of event-slot is 50 or 52:
                
                if event-item's type is arrow:
                    set {_split::*} to uncolored name of event-item split at " "
                    set {_number} to {_split::2} parsed as integer
                    set {_slot} to 0

                    if index of event-slot is 50: 
                        set {_save} to {_number} + 1

                    if index of event-slot is 52: 
                        set {_save} to {_number} - 1

                    set {_split::*} to split uncolored name of event-inventory at " "
                    if {_split::5} is set:
                        set {_name::*} to split {_split::5} at "("
                        set {_name2::*} to split {_name::2} at ")"
                        set {_player} to {_name2::1} parsed as offline player
                        set {_u} to uuid of {_player}
                        
                    else:
                        set {_u} to uuid of player
                        set {_player} to player

                    loop 35 times:
                        set {bank::%{_save}%::%{_slot}%::%{_u}%} to slot {_slot} of player's current inventory
                        add 1 to {_slot}

                    guiCreateBank(player, {_player}, {previousBank::%player's uuid%}, {_number})
            else if index of event-slot is 51:
                if name of player's inventory contains "Remote":
                    open (metadata tag "menu" of player) to player
                else:
                    close player's inventory
            else if index of event-slot is 46:

                if player's inventory contains 1 of {_gemstone}:
                    if player's inventory have space for 1 saddle:
                        remove {_gemstone} from player
                        give player 64 of {_emerald}
            else if index of event-slot is 47:

                if player's inventory contains 64 of {_emerald}:
                    if player's inventory have space for 1 of {_gemstone}:
                        remove 64 of {_emerald} from player
                        give player {_gemstone}
            else if index of event-slot is 48:

                while true:
                    if player's inventory contains 64 of {_emerald}:
                        if player's inventory have space for 1 of {_gemstone}:
                            remove 64 of {_emerald} from player
                            give player {_gemstone}
                        else:
                            stop loop
                    else:
                        stop loop
    else if event-inventory = (metadata tag "merchant" of player):
        cancel event

        if event-item is not air, black stained glass pane or gray stained glass pane:

            if click type is left mouse button:

                set {_item} to event-item
                set {_max} to size of lore of {_item}
                set {_itemLore::*} to {_item}'s lore
                    
                loop {_itemLore::*}:
                    if uncolored {_max}th line of lore of {_item} is "NORMAL", "UNIQUE", "RARE", "EPIC" or "LEGENDARY":
                        stop loop
                    clear {_max}th line of lore of {_item}
                    remove 1 from {_max}

                set {_lore::*} to event-item's lore
                loop {_lore::*}:
                    if loop-value contains "For":
                        set {_type::*} to split loop-value at " "
                        stop loop

                if uncolored {_type::1} is "Sell":      
                    
                    if player's inventory contains {_item}:
                        set {_size} to size of lore of event-item
                        
                        if max stack size of event-item > 1:
                            set {_checkLine1} to {_size} - 3
                            set {_checkLine2} to {_size} - 4
                            set {_checkLine3} to {_size} - 5
                        
                        else:
                            set {_checkLine1} to {_size} - 2
                            set {_checkLine2} to {_size} - 3
                            set {_checkLine3} to {_size} - 4
                        
                        set {_splitOne::*} to uncolored split {_checkLine1}th line of lore of event-item at "x "
                        set {_itemOneList::*} to uncolored split {_splitOne::1} at " "

                        set {_splitTwo::*} to uncolored split {_checkLine2}th line of lore of event-item at "x "
                        set {_itemTwoList::*} to uncolored split {_splitTwo::1} at " "

                        set {_splitThree::*} to uncolored split {_checkLine3}th line of lore of event-item at "x "
                        set {_itemThreeList::*} to uncolored split {_splitThree::1} at " "

                        set {_itemList::*} to ({items::armorItems::*}, {items::dropItems::*}, {items::toolItems::*}, {items::economyItems::*}, {items::consumableItems::*})
                        loop {_itemList::*}:
                            if uncolored name of loop-value is {_splitOne::2}:
                                set {_itemOne} to {_itemOneList::2} parsed as integer of loop-value
                            if uncolored name of loop-value is {_splitTwo::2}:
                                set {_itemTwo} to {_itemTwoList::2} parsed as integer of loop-value
                            if uncolored name of loop-value is {_splitThree::2}:
                                set {_itemThree} to {_itemThreeList::2} parsed as integer of loop-value
                        
                        if {_itemTwo} is not set:
                            set {_itemTwo} to air

                        if {_itemThree} is not set:
                            set {_itemThree} to air
                            
                        if {_itemOne} is not air:
                            add 1 to {_saddles}
                        if {_itemTwo} is not air:
                            add 1 to {_saddles}
                        if {_itemThree} is not air:
                            add 1 to {_saddles}

                        remove {_item} from player
                        if player's inventory have space for {_saddles} of saddle:
                            give {_itemOne}, {_itemTwo} and {_itemThree} to player
                        else:
                            send "&c[WARNING] » &fYou don't have any space in your inventory for that action."
                            give player {_item}
                else if uncolored {_type::1} is "Buy":

                    set {_size} to size of lore of event-item
                        
                    if max stack size of event-item > 1:
                        set {_checkLine1} to {_size} - 5
                        set {_checkLine2} to {_size} - 4
                        set {_checkLine3} to {_size} - 3
                        
                    else:
                        set {_checkLine1} to {_size} - 4
                        set {_checkLine2} to {_size} - 3
                        set {_checkLine3} to {_size} - 2
                        
                    set {_splitOne::*} to uncolored split {_checkLine1}th line of lore of event-item at "x "
                    set {_itemOneList::*} to uncolored split {_splitOne::1} at " "

                    set {_splitTwo::*} to uncolored split {_checkLine2}th line of lore of event-item at "x "
                    set {_itemTwoList::*} to uncolored split {_splitTwo::1} at " "

                    set {_splitThree::*} to uncolored split {_checkLine3}th line of lore of event-item at "x "
                    set {_itemThreeList::*} to uncolored split {_splitThree::1} at " "

                    set {_itemList::*} to ({items::armorItems::*}, {items::dropItems::*}, {items::toolItems::*}, {items::economyItems::*}, {items::consumableItems::*})
                    loop {_itemList::*}:
                        if uncolored name of loop-value is {_splitOne::2}:
                            set {_itemOne} to {_itemOneList::2} parsed as integer of loop-value
                        if uncolored name of loop-value is {_splitTwo::2}:
                            set {_itemTwo} to {_itemTwoList::2} parsed as integer of loop-value
                        if uncolored name of loop-value is {_splitThree::2}:
                            set {_itemThree} to {_itemThreeList::2} parsed as integer of loop-value

                    set {_numberList::*} to ("One", "Two" and "Three")
                    loop {_numberList::*}:

                        if {_item%loop-value%} is not set:
                            set {_final%loop-value%} to true
                            continue 
                            
                        if {_item%loop-value%} is set:
                            if player's inventory contains {_item%loop-value%}:
                                set {_final%loop-value%} to true
                            else:
                                set {_final%loop-value%} to false

                    if {_finalOne}, {_finalTwo} and {_finalThree} is true:
                        remove {_itemOne}, {_itemTwo} and {_itemThree} from player
                        if player's inventory have space for 1 saddle:
                            give player {_item}
                        else:
                            send "&c[WARNING] » &fYou don't have any space in your inventory for that action."
                            give player {_itemOne}, {_itemTwo} and {_itemThree}
            else if click type is right mouse button:

                if max stack of event-item > 1:

                    set {_lore::*} to event-item's lore
                    loop {_lore::*}:
                        if loop-value contains "For":
                            set {_type::*} to split loop-value at " "
                            stop loop

                    if uncolored {_type::1} is "Sell":
                        guiMerchantOptions(player, "&8Sell Options", event-item, "sell")
                    else if uncolored {_type::1} is "Buy":
                        guiMerchantOptions(player, "&8Buy Options", event-item, "buy")
    else if event-inventory = (metadata tag "options" of player):
        
        cancel event

        if index of event-slot is 31:
            open (metadata tag "merchant" of player) to player
        else if index of event-slot is between 11 and 15:

            if event-item is not air, black stained glass pane or gray stained glass pane:

                set {_item} to event-item
                set {_max} to size of lore of {_item}
                set {_itemLore::*} to {_item}'s lore
                    
                loop {_itemLore::*}:
                    if uncolored {_max}th line of lore of {_item} is "NORMAL", "UNIQUE", "RARE", "EPIC" or "LEGENDARY":
                        stop loop
                    clear {_max}th line of lore of {_item}
                    remove 1 from {_max}

                set {_lore::*} to event-item's lore
                loop {_lore::*}:
                    if loop-value contains "For":
                        set {_type::*} to split loop-value at " "
                        stop loop
                
                if uncolored {_type::1} is "Sell":      
                    
                    if player's inventory contains {_item}:
                        set {_size} to size of lore of event-item
                        
                        if max stack size of event-item > 1:
                            set {_checkLine1} to {_size} - 2
                            set {_checkLine2} to {_size} - 3
                            set {_checkLine3} to {_size} - 4
                            
                        set {_splitOne::*} to uncolored split {_checkLine1}th line of lore of event-item at "x "
                        set {_itemOneList::*} to uncolored split {_splitOne::1} at " "

                        set {_splitTwo::*} to uncolored split {_checkLine2}th line of lore of event-item at "x "
                        set {_itemTwoList::*} to uncolored split {_splitTwo::1} at " "

                        set {_splitThree::*} to uncolored split {_checkLine3}th line of lore of event-item at "x "
                        set {_itemThreeList::*} to uncolored split {_splitThree::1} at " "

                        set {_itemList::*} to ({items::armorItems::*}, {items::dropItems::*}, {items::toolItems::*}, {items::economyItems::*}, {items::consumableItems::*})
                        loop {_itemList::*}:
                            if uncolored name of loop-value is {_splitOne::2}:
                                set {_itemOne} to {_itemOneList::2} parsed as integer of loop-value
                            if uncolored name of loop-value is {_splitTwo::2}:
                                set {_itemTwo} to {_itemTwoList::2} parsed as integer of loop-value
                            if uncolored name of loop-value is {_splitThree::2}:
                                set {_itemThree} to {_itemThreeList::2} parsed as integer of loop-value
                        
                        if {_itemTwo} is not set:
                            set {_itemTwo} to air

                        if {_itemThree} is not set:
                            set {_itemThree} to air

                        remove {_item} from player
                        if player's inventory have space for {_saddles} of saddle:
                            give {_itemOne}, {_itemTwo} and {_itemThree} to player
                        else:
                            send "&c[WARNING] » &fYou don't have any space in your inventory for that action."
                            give player {_item}
                else if uncolored {_type::1} is "Buy":
                    
                    set {_size} to size of lore of event-item
                            
                    if max stack size of event-item > 1:
                        set {_checkLine1} to {_size} - 2
                        set {_checkLine2} to {_size} - 3
                        set {_checkLine3} to {_size} - 4

                    set {_splitOne::*} to uncolored split {_checkLine1}th line of lore of event-item at "x "
                    set {_itemOneList::*} to uncolored split {_splitOne::1} at " "

                    set {_splitTwo::*} to uncolored split {_checkLine2}th line of lore of event-item at "x "
                    set {_itemTwoList::*} to uncolored split {_splitTwo::1} at " "

                    set {_splitThree::*} to uncolored split {_checkLine3}th line of lore of event-item at "x "
                    set {_itemThreeList::*} to uncolored split {_splitThree::1} at " "

                    set {_itemList::*} to ({items::armorItems::*}, {items::dropItems::*}, {items::toolItems::*}, {items::economyItems::*}, {items::consumableItems::*})
                    loop {_itemList::*}:
                        if uncolored name of loop-value is {_splitOne::2}:
                            set {_itemOne} to {_itemOneList::2} parsed as integer of loop-value
                        if uncolored name of loop-value is {_splitTwo::2}:
                            set {_itemTwo} to {_itemTwoList::2} parsed as integer of loop-value
                        if uncolored name of loop-value is {_splitThree::2}:
                            set {_itemThree} to {_itemThreeList::2} parsed as integer of loop-value
                            
                    set {_numberList::*} to ("One", "Two" and "Three")
                    loop {_numberList::*}:

                        if {_item%loop-value%} is not set:
                            set {_final%loop-value%} to true
                            continue 
                            
                        if {_item%loop-value%} is set:
                            if player's inventory contains {_item%loop-value%}:
                                set {_final%loop-value%} to true
                            else:
                                set {_final%loop-value%} to false

                    if {_finalOne}, {_finalTwo} and {_finalThree} is true:
                        remove {_itemOne}, {_itemTwo} and {_itemThree} from player
                        if player's inventory have space for 1 saddle:
                            give player {_item}
                        else:
                            send "&c[WARNING] » &fYou don't have any space in your inventory for that action."
                            give player {_itemOne}, {_itemTwo} and {_itemThree}
    else if event-inventory = (metadata tag "menu" of player):
        cancel event

        if index of event-slot is 31:
            send formatted "<tooltip:&7View our store by clicking the message.><link:https://nordicrpg.tebex.io>&3[STORE] » &fClick here to view our store!"
        else if index of event-slot is 39:

            if player has permission "skript.rank":
                guiCreateBank(player, player, "&8Remote Banker", 1)
        else if index of event-slot is 41:

            if player has permission "skript.rank":

                set metadata tag "teleport" of player to chest with 6 row named "&8Remote Teleport"
                
                set {_u} to uuid of player
                set {_borderIndex} to 0
                set {_loopIndex} to 20
                
                loop 54 times:

                    if {_borderIndex} is not 20, 21, 22, 23, 24 or 49:
                        set slot {_borderIndex} of metadata tag "teleport" of player to black stained glass pane named "&8Border"

                    if {_borderIndex} is 10, 11, 12, 13, 14, 15, 16, 19, 25, 28, 29, 30, 31, 32, 33 or 34:
                        set slot {_borderIndex} of metadata tag "teleport" of player to gray stained glass pane named "&7Border"

                    if {_borderIndex} is 49:
                        set slot {_borderIndex} of metadata tag "teleport" of player to barrier named "&cClose"

                    add 1 to {_borderIndex}

                set {_items::*} to (grass block, red mushroom block, magma block, snow block)
                set {_name::*} to ("Arland", "Tyrsten", "Ostvik", "Dundret")

                loop 5 times:

                    if {_items::%loop-value%} is set:
                        set slot {_loopIndex} of metadata tag "teleport" of player to {_items::%loop-value%} named "&a%{_name::%loop-value%}%" with lore "&7Directly teleport to the selected area", "&7if you are not in combat.", "" and "&eTeleprt (Left Click)"

                    else:
                        set slot {_loopIndex} of metadata tag "teleport" of player to gray dye named "&fComing soon..." with lore "&7There are possibly still more areas" and "&7to come within future updates."

                    add 1 to {_loopIndex}

                open (metadata tag "teleport" of player) to player
    else if event-inventory = (metadata tag "teleport" of player):
        cancel event

        if index of event-slot is 49:
            open (metadata tag "menu" of player) to player
        else if {combat::%player's uuid%} is not true:
            if index of event-slot is 20:
                teleport player to location(-200, 4, -36, world "world", -90, 0)
            else if index of event-slot is 21:
                teleport player to location(-64, 4, -192, world "world", -90, 0)
            else if index of event-slot is 22:
                teleport player to location(-5, 7, -21, world "world", 0, 0)
            else if index of event-slot is 23:
                teleport player to location(-141, 31, 62, world "world", 90, 0)
    if uncolored name of player's current inventory contains "Item Buyer":
        cancel event
    
        if event-inventory = (metadata tag "buyer" of player):
        
            if index of event-slot is not 8:

                set {_item} to event-slot
                set event-slot to air
                give player {_item}

                guiCheckItemLore(player)

            else if index of event-slot is 8:

                set {_counter} to 0
                set {_value} to 0
                loop 8 times:
                    if slot {_counter} of player's current inventory is not air:
                        add getSellValue(slot {_counter} of player's current inventory, item amount of slot {_counter} of player's current inventory) to {_value}
                        set slot {_counter} of player's current inventory to air
                        set {_empty} to false
                    add 1 to {_counter}
                
                if {_empty} is false:

                    set {_itemList::*} to ({items::armorItems::*}, {items::dropItems::*}, {items::toolItems::*}, {items::economyItems::*}, {items::consumableItems::*})
                    loop {_itemList::*}:
                        if uncolored name of loop-value is "Emerald":
                            set {_emerald} to loop-value

                    play sound "BLOCK_COMPOSTER_FILL_SUCCESS" at volume 0.2 to player
                    guiCheckItemLore(player)
                    give player {_value} of {_emerald}

        else:

            if event-slot is not air:

                set {_item} to event-slot
                set {_value} to getSellValue({_item}, item amount of {_item})
                if {_value} is set:
                    
                    set {_counter} to 0

                    loop 8 times:

                        if slot {_counter} of player's current inventory is air:

                            set event-slot to air
                            set slot {_counter} of player's current inventory to {_item}

                            guiEditItemLore(player)

                            stop loop
                        else:
                            add 1 to {_counter}
    if uncolored name of player's current inventory contains "Item Fuser":
        cancel event
    
        if event-inventory = (metadata tag "fuser" of player):

            if index of event-slot is 21, 22 or 23:

                set {_item} to event-slot
                set event-slot to air
                give player {_item}

            if index of event-slot is 25:

                set {_counter} to 21
                loop 3 times:
                    add slot {_counter} of player's current inventory to {_items::*}
                    add 1 to {_counter}
                
                loop {_items::*}:
                    broadcast "%loop-value%"

        else:

            if event-slot is not air:

                set {_item} to event-slot
                set {_value} to getValidFuse({_item})
                if {_value} is true:
                    
                    set {_counter} to 21

                    loop 3 times:

                        if slot {_counter} of player's current inventory is air:

                            set event-slot to air
                            set slot {_counter} of player's current inventory to {_item}
                            broadcast "ymca"
                            stop loop

                        else:
                            add 1 to {_counter}

on inventory close:

    if event-inventory = (metadata tag "bank" of player): 

        set {_split::*} to uncolored name of event-inventory split at "Page "
        set {_int::*} to split {_split::2} at " "
        set {_save} to {_int::1} parsed as integer
        set {_slot} to 0

        set {_split2::*} to uncolored name of event-inventory split at " "
        if {_split2::5} is set:
            set {_name::*} to split {_split2::5} at "("
            set {_name2::*} to split {_name::2} at ")"
            set {_player} to {_name2::1} parsed as offline player
            set {_u} to uuid of {_player}
                        
        else:
            set {_u} to uuid of player
            set {_player} to player

        loop 35 times:
            set {bank::%{_save}%::%{_slot}%::%{_u}%} to slot {_slot} of player's current inventory
            add 1 to {_slot}
    else if event-inventory = (metadata tag "buyer" of player): 

        set {_counter} to 0
        loop 8 times:
            if slot {_counter} of player's current inventory is not air:
                give player slot {_counter} of player's current inventory
            add 1 to {_counter}