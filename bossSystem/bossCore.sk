function bossGetOdinChunks() :: integer:

    set {_odin} to 0

    loop all entities in chunk at location(-141, 40, 108, world "world") and location(-147, 40, 107, world "world"):
        set {_split::*} to split uncolored name of loop-value at " "
        if {_split::2} is "Odin":
            add 1 to {_odin}

    return {_odin}


function bossGetDraugChunks() :: integer:

    set {_draug} to 0

    loop all entities in chunk at location(22, 6, 82, world "world"), location(22, 6, 76, world "world"), location(25, 8, 61, world "world"), location(33, 5, 62, world "world"), location(15, 5, 75, world "world") and location(35, 6, 70, world "world"):
        set {_split::*} to split uncolored name of loop-value at " "
        if {_split::2} is "Draug":
            add 1 to {_draug}

    return {_draug}

function bossGetChadChunks() :: integer:

    set {_chad} to 0

    loop all entities in chunk at location(7, 4, -165, world "world"), location(7, 4, -158, world "world"), location(-2, 6, -158, world "world") and location(-3, 7, -169, world "world"):
        set {_split::*} to split uncolored name of loop-value at " "
        if {_split::2} is "Chad":
            add 1 to {_chad}

    return {_chad}

function bossGetGrootChunks() :: integer:

    set {_groot} to 0

    loop all entities in chunk at location(-232, 21, -132, world "world"), location(-219, 21, -132, world "world"), location(-232, 15, -132, world "world") and location(-219, 15, -132, world "world"):
        set {_split::*} to split uncolored name of loop-value at " "
        if {_split::2} is "Groot":
            add 1 to {_groot}

    return {_groot}

function bossCreateRewards(player: player, name: string, rewards: strings, boss: string, item: item):

    set metadata tag "type" of {_player} to chest with 6 row named "%{_name}%"

    set {_u} to uuid of {_player}
    set {_borderIndex} to 0
    set {_loopIndex} to 20

    loop 54 times:

        if {_borderIndex} is not 20, 21, 22, 23, 24 or 49:
            set slot {_borderIndex} of metadata tag "type" of {_player} to black stained glass pane named "&8Border"

        if {_borderIndex} is 10, 11, 12, 13, 14, 15, 16, 19, 25, 28, 29, 30, 31, 32, 33 or 34:
            set slot {_borderIndex} of metadata tag "type" of {_player} to gray stained glass pane named "&7Border"

        if {_borderIndex} is 49:
            set slot {_borderIndex} of metadata tag "type" of {_player} to barrier named "&cBack"

        add 1 to {_borderIndex}

    loop 5 times:

        set {_itemList::*} to ({items::armorItems::*}, {items::dropItems::*}, {items::toolItems::*}, {items::economyItems::*}, {items::consumableItems::*})

        set {_items} to {_rewards::%loop-number%}
        set {_loopItem} to {_item}
        set {_split::*} to split {_items} at ":"

        set {_squared} to loop-number ^ 3
        
        set lore of {_loopItem} to "&7Rewards for killing the %{_boss}% boss.", "", "&7Current Kills: &c%{boss::%{_boss}%::%{_u}%}%", "&7Kills Needed: &c%{_squared}%", "" and "&7&nRewards:"

        add "&8- &7%{_split::1}%" to lore of {_loopItem}

        if {_split::2} is set:
            add "&8- &7%{_split::2}%" to lore of {_loopItem}

        if {boss::%{_boss}%::%{_u}%} >= {_squared}:
            if {boss::%{_boss}%::claimed::%{_squared}%::%{_u}%} is true:
                add "" and "&cYou have already claimed this reward!" to lore of {_loopItem}
            else:
                add "" and "&aClick to claim!" to lore of {_loopItem}
        else:
            add "" and "&cYou don't have enough %{_boss}% kills." to lore of {_loopItem}

        if {_loopIndex} is 20:
            set name of {_loopItem} to "&aBoss Reward I"
        else if {_loopIndex} is 21:
            set name of {_loopItem} to "&aBoss Reward II"
        else if {_loopIndex} is 22:
            set name of {_loopItem} to "&aBoss Reward III"
        else if {_loopIndex} is 23:
            set name of {_loopItem} to "&aBoss Reward IV"
        else if {_loopIndex} is 24:
            set name of {_loopItem} to "&aBoss Reward V"
            
        set slot {_loopIndex} of metadata tag "type" of {_player} to loop-value of {_loopItem}

        add 1 to {_loopIndex}

    open (metadata tag "type" of {_player}) to {_player}

function bossCreateCore(player: player, name: string):
    
    set metadata tag "boss" of {_player} to chest with 6 row named "%{_name}%"

    set {_u} to uuid of {_player}
    set {_borderIndex} to 0
    set {_loopIndex} to 20
    set {_bosses::*} to ("groot", "chad", "draug", "odin") 

    loop {_bosses::*}:
        if {boss::%loop-value%::%{_u}%} is not set:
            set {boss::%loop-value%::%{_u}%} to 0

    set {_gui::groot} to dead bush named "&aGroot Rewards" with lore "&7Rewards can be obtained by killing the boss", "&7of the forest and the woodland.", "", "&7Defeated: &c%{boss::groot::%{_u}%}%", "" and "&eView (Left Click)"
    set {_gui::chad} to red mushroom named "&aChad Rewards" with lore "&7Rewards can be obtained by killing the boss", "&7of the mushroom forest.", "", "&7Defeated: &c%{boss::chad::%{_u}%}%", "" and "&eView (Left Click)"
    set {_gui::draug} to crimson roots named "&aDraug Rewards" with lore "&7Rewards can be obtained by killing the boss", "&7of the red darkness.", "", "&7Defeated: &c%{boss::draug::%{_u}%}%", "" and "&eView (Left Click)"
    set {_gui::odin} to feather named "&aOdin Rewards" with lore "&7Rewards can be obtained by killing the boss", "&7of the godly spirits.", "", "&7Defeated: &c%{boss::odin::%{_u}%}%", "" and "&eView (Left Click)"
    set {_gui::soon} to gray dye named "&fComing soon..." with lore "&7There are still more challenges and rewards" and "&7to come, stay tuned for future updates."

    loop 54 times:

        if {_borderIndex} is not 20, 21, 22, 23, 24 or 49:
            set slot {_borderIndex} of metadata tag "boss" of {_player} to black stained glass pane named "&8Border"

        if {_borderIndex} is 10, 11, 12, 13, 14, 15, 16, 19, 25, 28, 29, 30, 31, 32, 33 or 34:
            set slot {_borderIndex} of metadata tag "boss" of {_player} to gray stained glass pane named "&7Border"

        if {_borderIndex} is 49:
            set slot {_borderIndex} of metadata tag "boss" of {_player} to barrier named "&cClose"

        add 1 to {_borderIndex}

    loop 5 times:

        if {_gui::%{_bosses::%loop-number%}%} is set:
            set slot {_loopIndex} of metadata tag "boss" of {_player} to {_gui::%{_bosses::%loop-number%}%}

        else:
            set slot {_loopIndex} of metadata tag "boss" of {_player} to {_gui::soon}

        add 1 to {_loopIndex}

    open (metadata tag "boss" of {_player}) to {_player}

command /boss [<text>] [<text>] [<text>] [<text>] [<text>]:
    permission: op
    permission message: Unknown command. Type "/help" for help.
    trigger:

        if arg-1 is set:

            if arg-1 is "groot", "chad", "draug" or "odin": # add new options

                if arg-2 is set:

                    if arg-2 is "user":
            
                        if arg-3 is set:

                            if arg-3 parsed as offline player is offline player:

                                if arg-4 is set:

                                    set {_player} to arg-3 parsed as offline player
                                    set {_u} to uuid of {_player}

                                    if {boss::%arg-1%::%{_u}%} is not set:
                                        set {boss::%arg-1%::%{_u}%} to 0

                                    if arg-4 is "set", "remove" or "add":

                                        if arg-5 is set:

                                            set {_value} to arg-5 parsed as integer

                                            if arg-5 parsed as integer is integer:

                                                if arg-4 is "set":
                                                    send "&4[BOSS] » &fYou set &4%arg-3%&f's %arg-1% boss kills to &4%arg-5%&f."
                                                    set {boss::%arg-1%::%{_u}%} to {_value}
                                                else if arg-4 is "add":
                                                    send "&4[BOSS] » &fYou added %arg-5% to &4%arg-3%&f's %arg-1% boss kills."
                                                    add {_value} to {boss::%arg-1%::%{_u}%}
                                                else if arg-4 is "remove":
                                                    send "&4[BOSS] » &fYou removed %arg-5% from &4%arg-3%&f's %arg-1% boss kills."
                                                    remove {_value} from {boss::%arg-1%::%{_u}%}
                                            else:
                                                send "&4[BOSS] » &cThis argument must be an integer."

                                        else:
                                            send "&4[BOSS] » &cPlease specify an integer."
                                    else if arg-4 is "check":
                                        send "&4[BOSS] » &fThe %arg-1% boss kills of &4%arg-3%&f is &4%{boss::%arg-1%::%{_u}%}%&f."
                                    else if arg-4 is "clear":
                                        send "&4[BOSS] » &fYou cleared &4%arg-3%&f's %arg-1% boss kills."
                                        set {boss::%arg-1%::%{_u}%} to 0
                                        loop 5 times:
                                            set {_squared} to loop-number ^ 3
                                            set {boss::%arg-1%::claimed::%{_squared}%::%{_u}%} to false
                                    else:
                                        send "&4[BOSS] » &cThis command option does not exist."

                                else:
                                    send "&4[BOSS] » &cPlease specify a command option."

                            else:
                                send "&4[BOSS] » &cThis player does not exist."

                        else:
                            send "&4[BOSS] » &cPlease specify a player."  

                    else if arg-2 is "deactivate": 

                        send "&4[BOSS] » &fDeactivated the &4%arg-1% &fspawner."  
                        make console execute command "hd setline Boss%arg-1%Cooldown 2 &75 minute(s)"
                        
                        set {_minutes} to 5

                        loop 5 times:
                            wait 1 minute
                            remove 1 from {_minutes}
                            make console execute command "hd setline Boss%arg-1%Cooldown 2 &7%{_minutes}% minute(s)"

                        make console execute command "hd setline Boss%arg-1%Cooldown 2 &7None"
                        make console execute command "mm m kill Boss%arg-1%"
                        
                        if arg-1 is "Groot":
                            set {_boss} to bossGetGrootChunks()
                            if {_boss} is 0:
                                make console execute command "mm m spawn BossGroot 1 world,-226,16,-136"
                            else:
                                make console execute command "boss groot activate"
                        else if arg-1 is "Chad":
                            set {_boss} to bossGetChadChunks()
                            if {_boss} is 0:
                                make console execute command "mm m spawn BossChad 1 world,6,4,-166"
                            else:
                                make console execute command "boss chad activate"   
                        else if arg-1 is "Draug":
                            set {_boss} to bossGetDraugChunks()
                            if {_boss} is 0:
                                make console execute command "mm m spawn BossDraug 1 world,25,6,70"
                            else:
                                make console execute command "boss draug activate"   
                        else if arg-1 is "Odin":
                            set {_boss} to bossGetOdinChunks()
                            if {_boss} is 0:
                                make console execute command "mm m spawn BossOdin 1 world,-144,40,107"
                            else:
                                make console execute command "boss odin activate"                            
                    else if arg-2 is "activate": 

                        send "&4[BOSS] » &fActivated the &4%arg-1%&f spawner."  
                        make console execute command "hd setline Boss%arg-1%Cooldown 2 &7None"

                    else:
                        send "&4[BOSS] » &cThis command option does not exist."

                else:
                    send "&4[BOSS] » &cPlease specify a command option."

            else:
                send "&4[BOSS] » &cThis command option does not exist."

        else:
            send "&4[BOSS] » &cPlease specify a command option."

on inventory click:

    if event-inventory = (metadata tag "boss" of player): 
        cancel event

        if index of event-slot is 20:
            bossCreateRewards(player, "&8Groot Rewards", ("1x Woodland Tree:4x Gemstone", "1x Woodland Tree:6x Gemstone", "1x Woodland Tree:12x Gemstone", "1x Woodland Tree:24x Gemstone", "1x Woodland Tree:48x Gemstone"), "groot", event-item)
        else if index of event-slot is 21:
            bossCreateRewards(player, "&8Chad Rewards", ("1x Spiritual Prompt:6x Gemstone", "1x Spiritual Prompt:9x Gemstone", "1x Spiritual Prompt:18x Gemstone", "1x Spiritual Prompt:36x Gemstone", "1x Spiritual Prompt:72x Gemstone"), "chad", event-item)
        else if index of event-slot is 22:
            bossCreateRewards(player, "&8Draug Rewards", ("1x Basalt Slag:9x Gemstone", "1x Basalt Slag:14x Gemstone", "1x Basalt Slag:28x Gemstone", "1x Basalt Slag:56x Gemstone", "1x Basalt Slag:112x Gemstone"), "draug", event-item)
        else if index of event-slot is 23:
            bossCreateRewards(player, "&8Odin Rewards", ("1x Divinity Cake:14x Gemstone", "1x Divinity Cake:21x Gemstone", "1x Divinity Cake:42x Gemstone", "1x Divinity Cake:84x Gemstone", "1x Divinity Cake:168x Gemstone"), "odin", event-item)
        # else if index of event-slot is 24:
            # broadcast "pepe"
        else if index of event-slot is 49:
            close player's inventory
    else if event-inventory = (metadata tag "type" of player): 
        cancel event

        if index of event-slot is 20, 21, 22, 23 or 24:

            set {_boss::*} to split 1st line of lore of event-item at " "
            set {_boss} to uncolored {_boss::5}
            set {_u} to uuid of player

            set {_splitOneFirst::*} to uncolored split 7th line of lore of event-item at "- "
            set {_splitTwoFirst::*} to uncolored split 8th line of lore of event-item at "- "

            set {_splitOne::*} to uncolored split {_splitOneFirst::2} at "x "
            set {_splitTwo::*} to uncolored split {_splitTwoFirst::2} at "x "

            set {_itemList::*} to ({items::armorItems::*}, {items::dropItems::*}, {items::toolItems::*}, {items::economyItems::*}, {items::consumableItems::*})
            loop {_itemList::*}:
                if uncolored name of loop-value is {_splitOne::2}:
                    set {_itemOne} to {_splitOne::1} parsed as integer of loop-value
                else if uncolored name of loop-value is {_splitTwo::2}:
                    set {_itemTwo} to {_splitTwo::1} parsed as integer of loop-value

            set {_needed::*} to uncolored split 4th line of lore of event-item at ": "
            set {_squared} to {_needed::2} parsed as an integer

            if {boss::%{_boss}%::%{_u}%} >= {_squared}:
                if {boss::%{_boss}%::claimed::%{_squared}%::%{_u}%} is not true:
                    set {_itemRewardNumber::*} to split uncolored name of event-item at " "
                    set name of {_itemOne} to "%name of {_itemOne}% %{_itemRewardNumber::3}%" 
                    give player {_itemOne} and {_itemTwo}
                    set {boss::%{_boss}%::claimed::%{_squared}%::%{_u}%} to true
                else:
                    set {_size} to size of lore of event-item
                    set {_size}th line of lore of slot index of event-slot of player's current inventory to "&cYou have already claimed this reward!"


        else if index of event-slot is 49:
            open (metadata tag "boss" of player) to player
 
on load: # add new options
    set {_groot} to bossGetGrootChunks()
    set {_chad} to bossGetChadChunks()
    set {_draug} to bossGetDraugChunks()
    set {_odin} to bossGetOdinChunks()
    if {_groot} is 0:
        make console execute command "boss groot deactivate"
    if {_chad} is 0:
        make console execute command "boss chad deactivate"
    if {_draug} is 0:
        make console execute command "boss draug deactivate"
    if {_odin} is 0:
        make console execute command "boss odin deactivate"
        
on tab complete of "/boss":

    if tab arg-1 is not "groot", "chad", "draug" or "odin": # add new options  
        clear {_tabCompletion::*}
        set {_tabCompletion::*} to ("groot", "chad", "draug" and "odin") # add new options
        set tab completions for position 1 to {_tabCompletion::*}

    if tab arg-2 is not "user", "deactivate" or "activate": # add new options  
        clear {_tabCompletion::*}
        set {_tabCompletion::*} to ("user") # add new options
        set tab completions for position 2 to {_tabCompletion::*}

    if tab arg-2 is "user":
        clear {_tabCompletion::*}
        loop players:
            add loop-value to {_tabCompletion::*}
            set tab completions for position 3 to {_tabCompletion::*}

    if tab arg-3 parsed as player is player:
        if tab arg-4 is not "set", "remove", "add", "clear" or "check": # add new options 
            clear {_tabCompletion::*}
            set {_tabCompletion::*} to ("set", "check", "add", "clear", "remove") # add new options 
            set tab completions for position 4 to {_tabCompletion::*}