function coreRoundTo(n: number, to: number) :: number:

   return floor(({_n} * 10^{_to}) + 0.5) / 10^{_to}

function coreRandomNumber(player: player, min: number, max: number, percentage: number) :: number:

    set {_u} to uuid of {_player}

    if {boost::luck::%{_u}%} is greater than 0:
    
        set {_percentage} to {_percentage} * 2
        if {_percentage} is greater than 100:
            set {_percentage} to 100

    set {_random} to random number between {_min} and {_max}
    set {_chance} to random number between 0.001 and 100.000
    
    if {_chance} is between 0.001 and {_percentage}:
        return {_random}
    else:
        return 0

function coreReturnCharacterBar(player: player, bar: string) :: string:

    set {_u} to uuid of {_player}
    
    set {_len} to length of {_bar}
    set {_loopCounter} to 0
    set {_returnChar} to ""
    set {_formula} to 25 * ({level::%{_u}%} * {level::%{_u}%}) + 175 * {level::%{_u}%}

    loop {_len} times:
        if {xp::%{_u}%} >= ({_formula} / {_len}) * loop-number:
            set {_returnChar} to "%{_returnChar}%&3%char at {_loopCounter} in {_bar}%"
        else:
            set {_returnChar} to "%{_returnChar}%&7%char at {_loopCounter} in {_bar}%"
        add 1 to {_loopCounter}
    return {_returnChar}

function coreCheckLevel(player: player):

    set {_u} to uuid of {_player}
    set {_next} to 25 * ({level::%{_u}%} * {level::%{_u}%}) + 175 * {level::%{_u}%}
 
    if {xp::%{_u}%} > {_next}:
        add 1 to {level::%{_u}%}
        set {xp::%{_u}%} to 0
        play sound "ENTITY_PLAYER_LEVELUP" with volume 0.2 to {_player}
        send "&3[LEVEL] » &fYou just leveled up to level &3%{level::%{_u}%}%&f and gained &c+2❤ &fand &6+1✦&f." to {_player}

function coreAddXp(player: player, experience: number):

    set {_u} to uuid of {_player}
    set {_next} to 25 * ({level::%{_u}%} * {level::%{_u}%}) + 175 * {level::%{_u}%}

    if {boost::experience::%{_u}%} is greater than 0:
        set {_experience} to {_experience} * 2

    set {actionBarSet::%{_u}%} to true
    play sound "ENTITY_EXPERIENCE_ORB_PICKUP" with volume 0.2 to {_player}
    add {_experience} to {xp::%{_u}%}
    set {_add} to "+%{_experience}% Experience (%coreRoundTo({xp::%{_u}%}, 1)%/%round({_next})%)"
    send action bar coreGetActionBar({_player}, coreReturnCharacterBar({_player}, {_add})) to {_player}
    wait 1 seconds
    set {actionBarSet::%{_u}%} to false

function coreGetActionBar(player: player, string: string) :: string:
    
    set {_u} to uuid of {_player}
    return "&c%coreRoundTo({health::currentHearts::%{_u}%}, 1)%/%{health::maxHearts::%{_u}%}%❤  %{_string}%&6  %coreRoundTo({mana::currentMana::%{_u}%}, 1)%/%{mana::maxMana::%{_u}%}%✦"

function coreEndActionBar(player: player):

    wait 1 seconds
    set {actionBarSet::%{_u}%} to false

function coreGetLevelBar(player: player) :: string:

    set {_u} to uuid of {_player}
    
    set {_bar} to ""
    set {_formula} to 25 * ({level::%{_u}%} * {level::%{_u}%}) + 175 * {level::%{_u}%}

    loop 10 times:
        if {xp::%{_u}%} >= ({_formula} / 10) * loop-number:
            set {_bar} to "%{_bar}%&3▌"
        else:
            set {_bar} to "%{_bar}%&7▌"
    return {_bar}

function coreGetEntity(string: string) :: string:
    
    set {_entity::*} to split uncolored {_string} at "] "
    set {_final::*} to split {_entity::2} at " "

    if {_final::3} is set:
        return "%{_final::1}% %{_final::2}%"
    else:
        return {_final::1}

function coreCheckRegion(player: player, pos1: location, pos2: location) :: boolean:

    add 0.001 to {_pos1}'s x-coord 
    add 0.999 to {_pos2}'s z-coord 

    if {_player}'s x-coord is between {_pos1}'s x-coord and {_pos2}'s x-coord:

        if {_player}'s y-coord is between {_pos1}'s y-coord and {_pos2}'s y-coord:

            if {_player}'s z-coord is between {_pos1}'s z-coord and {_pos2}'s z-coord:
                set {_return} to true
        
    if {_return} is true:
        return true
        
    else:
        return false

function coreGetPlayerRegion(player: player) :: string:

    if coreCheckRegion({_player}, location(-332, 21, -16, world "world"), location(-83, 76, 165, world "world")) or coreCheckRegion({_player}, location(-317, 0, 93, world "world"), location(-98, 60, 135, world "world")) is true:
        return "dundret"     
    else if coreCheckRegion({_player}, location(-166, 59, -75, world "world"), location(49, 0, -305, world "world")) is true:
        return "tyrsten"
    else if coreCheckRegion({_player}, location(24, 61, 61, world "world"), location(-58, 1, -27, world "world")) is true:
        return "safe" 
    else if coreCheckRegion({_player}, location(98, 73, -140, world "world"), location(-116, 5, 142, world "world")) is true:
        return "ostvik"           
    else if coreCheckRegion({_player}, location(-332, 47, 100, world "world"), location(-134, 1, -164, world "world")) is true:
        return "arland"
    else:
        return "none"

function coreDamagePlayer(player: player, damage: number) :: number:

    set {_u} to uuid of {_player}
    remove {_damage} from {health::currentHearts::%{_u}%}

    if {health::currentHearts::%{_u}%} is less than 0:
        kill {_player}

    set {_return} to 10 * ({_damage} / {health::maxHearts::%{_u}%})
    return {_return}

function coreHealPlayer(player: player, heal: number) :: number:

    set {_u} to uuid of {_player}
    set {_return} to 0.1 * ({_heal} * {health::maxHearts::%{_u}%})
    
    if {health::currentHearts::%{_u}%} + {_return} > {health::maxHearts::%{_u}%}:
        set {health::currentHearts::%{_u}%} to {health::maxHearts::%{_u}%}

    else:
        add {_return} to {health::currentHearts::%{_u}%}
 
    return {_heal}

function coreAddMana(player: player, mana: number) :: number:

    set {_u} to uuid of {_player}
    set {_return} to 0.1 * ({_mana} * {mana::maxMana::%{_u}%})
    
    if {mana::currentMana::%{_u}%} + {_return} > {mana::maxMana::%{_u}%}:
        set {mana::currentMana::%{_u}%} to {mana::maxMana::%{_u}%}

    else:
        add {_return} to {mana::currentMana::%{_u}%}

    return {_mana}

function coreRegenerateHealth(player: player):

    set {_u} to uuid of {_player}
    
    if {_player}'s health is 10:

        if {health::currentHearts::%{_u}%} < {health::maxHearts::%{_u}%}:

            if {combat::%{_u}%} is not true:
                coreHealPlayer({_player}, 0.2)

        else if {health::currentHearts::%{_u}%} > {health::maxHearts::%{_u}%}:
            set {health::currentHearts::%{_u}%} to {health::maxHearts::%{_u}%}

function coreUpdateHearts(player: player):

    set {_u} to uuid of {_player}

    set {_fraction} to {health::maxHearts::%{_u}%} / 10
    set {_current} to {health::currentHearts::%{_u}%} / {_fraction}
    
    set health of {_player} to {_current}

function coreRegenerateMana(player: player):

    set {_u} to uuid of {_player}

    if {mana::currentMana::%{_u}%} < {mana::maxMana::%{_u}%}:
        coreAddMana({_player}, 0.2)

    else if {mana::currentMana::%{_u}%} > {mana::maxMana::%{_u}%}:
        set {mana::currentMana::%{_u}%} to {mana::maxMana::%{_u}%}

function coreKillDrop(player: player, amount: number, drop: item):

    if {_player}'s inventory have space for {_amount} of {_drop}:
        give {_player} {_amount} of {_drop}
    else:
        set {actionBarSet::%{_u}%} to true
        send action bar coreGetActionBar({_player}, "&cFull inventory!") to {_player}
        coreEndActionBar({_player})
        coreCheckLevel({_player})
        set {actionBarSet::%{_u}%} to true

function coreBreakDrop(player: player, tool: item, allowed: itemtypes, reward: item, min: number, max: number, experience: number) :: number:
    
    set {_u} to uuid of {_player}
    set {_type::*} to split uncolored 1st line of lore of {_tool} at "."

    if {_type::1} is "Harvesting Tool" or "Mining Tool":

        loop {_allowed::*}:
            if uncolored name of {_tool} is uncolored name of loop-value:
                set {_continue} to true
                stop loop

        if {_continue} is true:

            set {_lore::*} to {_tool}'s lore
            loop {_lore::*}:
                if loop-value contains "Level":
                    set {_level::*} to split uncolored loop-value at "⚗"

            if {level::%{_u}%} >= {_level::2} parsed as integer:
                set {_random} to random number between {_min} and {_max}
                
                if {_player}'s inventory have space for {_random} of {_reward}:
                    give {_player} {_random} of {_reward}
                    coreAddXp({_player}, {_experience})
                    coreCheckLevel({_player})
                    return round({_random})
                else:
                    set {actionBarSet::%{_u}%} to true
                    send action bar coreGetActionBar({_player}, "&cFull inventory!") to {_player}
                    coreEndActionBar({_player})
                    set {actionBarSet::%{_u}%} to true

            else:
                set {actionBarSet::%{_u}%} to true
                send action bar coreGetActionBar({_player}, "&cNot required level!") to {_player}
                coreEndActionBar({_player})
                set {actionBarSet::%{_u}%} to false
    else:
        set {_random} to random number between {_min} and {_max}
        
        if {_player}'s inventory have space for {_random} of {_reward}:
            give {_player} {_random} of {_reward}
            coreAddXp({_player}, {_experience})
            coreCheckLevel({_player})
            return round({_random})
        else:
            set {actionBarSet::%{_u}%} to true
            send action bar coreGetActionBar({_player}, "&cFull inventory!") to {_player}
            coreEndActionBar({_player})
            set {actionBarSet::%{_u}%} to false


function coreBreakBoost(player: player, tool: item, allowed: itemtypes) :: number:

    set {_u} to uuid of {_player}
    set {_type::*} to split uncolored 1st line of lore of {_tool} at "."

    if {_type::1} is "Harvesting Tool" or "Mining Tool":

        loop {_allowed::*}:
            if uncolored name of {_tool} is uncolored name of loop-value:
                set {_continue} to true
                stop loop
                
        if {_continue} is true:
            
            set {_lore::*} to {_tool}'s lore
            loop {_lore::*}:
                if loop-value contains "Crops" or "Ores":
                    set {_break::*} to split uncolored loop-value at "+"
                else if loop-value contains "Double Drop":
                    set {_doubleDrop::*} to split uncolored loop-value at ": "
                    set {_double::*} to split {_doubleDrop::2} at "%%"
                    set {_double} to {_double::1} parsed as integer
                else if loop-value contains "Level":
                    set {_level::*} to split uncolored loop-value at "⚗"

            if {level::%{_u}%} >= {_level::2} parsed as integer:

                if {_double} is set:
                    
                    set {_random} to random integer between 1 and 100

                    if {_random} is between 1 and {_double}:
                        return round({_break::2} parsed as integer * 2)

                    else:
                        return round({_break::2} parsed as integer)

                else:
                    return round({_break::2} parsed as integer)

function coreDamageBoost(player: player, tool: item) :: number:

    set {_u} to uuid of {_player}
    set {_type::*} to split uncolored 1st line of lore of {_tool} at "."

    if {_type::1} is "Damaging Tool", "Magical Tool" or "Archer Tool":
        
        set {_lore::*} to {_tool}'s lore
        loop {_lore::*}:
            if loop-value contains "Damage":
                set {_damage::*} to split uncolored loop-value at "+"
            else if loop-value contains "Level":
                set {_level::*} to split uncolored loop-value at "⚗"

        if {level::%{_u}%} >= {_level::2} parsed as integer:
            return {_damage::2} parsed as integer

        else:
            set {actionBarSet::%{_u}%} to true
            send action bar coreGetActionBar({_player}, "&cNot required level!") to {_player}
            wait 1 seconds
            set {actionBarSet::%{_u}%} to false

function coreArmorBoost(player: player, tool: item) :: number:

    set {_u} to uuid of {_player}
    set {_type::*} to split uncolored 1st line of lore of {_tool} at "."

    if {_type::1} is "Defense Armor":

        set {_lore::*} to {_tool}'s lore
        loop {_lore::*}:
            if loop-value contains "Health":
                set {_health::*} to split uncolored loop-value at "+"
            else if loop-value contains "Level":
                set {_level::*} to split uncolored loop-value at "⚗"
        
        if {level::%{_u}%} >= {_level::2} parsed as integer:
            return {_health::2} parsed as integer

function coreManaBoost(player: player, tool: item) :: number:

    set {_u} to uuid of {_player}
    set {_type::*} to split uncolored 1st line of lore of {_tool} at "."

    if {_type::1} is "Defense Armor":

        set {_lore::*} to {_tool}'s lore
        loop {_lore::*}:
            if loop-value contains "Mana":
                set {_mana::*} to split uncolored loop-value at "+"
            else if loop-value contains "Level":
                set {_level::*} to split uncolored loop-value at "⚗"
        
        if {level::%{_u}%} >= {_level::2} parsed as integer:
            return {_mana::2} parsed as integer

function coreAttackSpeedBoost(player: player, tool: item) :: number:

    set {_u} to uuid of {_player}
    set {_type::*} to split uncolored 1st line of lore of {_tool} at "."

    if {_type::1} is "Damaging Tool":

        set {_lore::*} to {_tool}'s lore
        loop {_lore::*}:
            if loop-value contains "Attack Speed":
                set {_attackSpeed::*} to split uncolored loop-value at ": "
            else if loop-value contains "Level":
                set {_level::*} to split uncolored loop-value at "⚗"       

        if {level::%{_u}%} >= {_level::2} parsed as integer:
            return {_attackSpeed::2} parsed as an integer

function coreCriticalChance(player: player, tool: item) :: boolean:

    set {_u} to uuid of {_player}
    set {_type::*} to split uncolored 1st line of lore of {_tool} at "."

    if {_type::1} is "Damaging Tool", "Magical Tool" or "Archer Tool":

        set {_lore::*} to {_tool}'s lore
        loop {_lore::*}:
            if loop-value contains "Crit Chance":
                set {_criticalChance::*} to split uncolored loop-value at " +"
            else if loop-value contains "Level":
                set {_level::*} to split uncolored loop-value at "⚗"       

        set {_criticalChanceFinal::*} to split {_criticalChance::2} at "%%"

        if {level::%{_u}%} >= {_level::2} parsed as integer:

            set {_chance} to {_criticalChanceFinal::1} parsed as an integer
            set {_random} to random integer between 1 and 100

            if {_random} is between 1 and {_chance}:
                return true


every 1 seconds:

    loop all players:
        if {actionBarSet::%loop-player's uuid%} is not true:
        
            if {health::customHearts::%loop-player's uuid%} is not set:
                set {_boost} to coreArmorBoost(loop-player, helmet of loop-player) + coreArmorBoost(loop-player, chestplate of loop-player) + coreArmorBoost(loop-player, leggings of loop-player) + coreArmorBoost(loop-player, boots of loop-player)
                set {health::maxHearts::%loop-player's uuid%} to {_boost} + {souls::lanterns::amount::%loop-player's uuid%} + 20 + ({level::%loop-player's uuid%} * 2)

                coreRegenerateHealth(loop-player)

            if {mana::customMana::%loop-player's uuid%} is not set:
                set {_boost} to coreManaBoost(loop-player, helmet of loop-player) + coreManaBoost(loop-player, chestplate of loop-player) + coreManaBoost(loop-player, leggings of loop-player) + coreManaBoost(loop-player, boots of loop-player)
                set {mana::maxMana::%loop-player's uuid%} to {_boost} + 15 + ({level::%loop-player's uuid%} * 1)

                coreRegenerateMana(loop-player)

            send action bar coreGetActionBar(loop-player, "&7%round(loop-player's x coordinate)% %round(loop-player's y coordinate)% %round(loop-player's z coordinate)%") to loop-player 
