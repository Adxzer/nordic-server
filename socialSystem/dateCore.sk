function dateLaunchFireworks():

    loop 50 times:

        set {_random1} to random number between -3 and 3
        set {_random2} to random number between -3 and 3
        set {_random3} to random number between -3 and 3

        launch flickering trailing burst firework colored blue and green at location(-184 + {_random1}, 4 + {_random2}, -35 + {_random3}, world "world")
        launch trailing flickering star coloured purple, yellow, blue, green and red fading to pink at location(-184 + {_random3}, 4 + {_random2}, -35 + {_random2}, world "world")
        launch ball large coloured red, purple and white fading to light green and black at location(-184 + {_random2}, 4 + {_random3}, -35 + {_random1}, world "world")
        wait 15 ticks

function dateStartFarmingFestival():

    set {event::farming::status} to true
    add 1 to {event::farming::amount}
    clear {event::farming::collected::*}

    make console execute command "hd setline eventNpcTag 1 &7&lCLICK"
    make console execute command "load farming"

    make console execute command "npc select 36"
    make console execute command "npc moveto -173 4 -40 world"

    play sound "BLOCK_NOTE_BLOCK_PLING" with volume 0.2 to all players
    play sound "BLOCK_NOTE_BLOCK_BELL" with volume 0.2 to all players
    
    broadcast "&7&m                                                                  "
    broadcast ""
    broadcast "  &e&lFARMING FESTIVAL"
    broadcast ""
    broadcast "    &7Head down to Arland to view the leaderboard. Don't forget"
    broadcast "    &7to talk to Noah and buy his exclusive farming items!"
    broadcast ""
    broadcast "  &f%dateGetMonth({month})% %dateGetDay({day})% &f%uncolored dateGetYear({year})%"
    broadcast ""
    broadcast "&7&m                                                                  "

function dateEndFarmingFestival():

    set {event::farming::status} to false
    make console execute command "hd setline eventNpcTag 1 &7"
    make console execute command "load"

    make console execute command "npc select 36"
    make console execute command "npc moveto -634 1 -481 world"

    loop sorted indices of {event::farming::collected::*} in descending order:

        add 1 to {_counter}
        if {_counter} is less than 5:

            set {_user} to loop-value parsed as offline player
            set {_u} to uuid of {_user}
            set {_top::%{_counter}%} to {_u}
            add bucket of axolotl of unbreaking 1 named "&cDelightful Bucket" with lore "&7Event Trophie.", "", "&7A reward granted from placing", "&7%dateGetDay({_counter})% in the &eFarming Festival &7event.", "",  "&c★★★★&8☆" and "&c&lSPECIAL" with all flags hidden to {event::rewards::%{_u}%::*}
        else:
            stop loop

    broadcast "&7&m                                                                  "
    broadcast ""
    broadcast "  &e&lFARMING FESTIVAL"
    broadcast ""
    broadcast "    &fThank you everyone for participating, here's the top 4"
    broadcast "    &ffrom the Farming Festival event:"
    broadcast ""
    broadcast "    &61## &7%{_top::1} parsed as offline player% &e%bestiaryGetFormat(round({event::farming::collected::%{_top::1}%}))%"
    broadcast "    &62## &7%{_top::2} parsed as offline player% &e%bestiaryGetFormat(round({event::farming::collected::%{_top::2}%}))%"
    broadcast "    &63## &7%{_top::3} parsed as offline player% &e%bestiaryGetFormat(round({event::farming::collected::%{_top::3}%}))%"
    broadcast "    &64## &7%{_top::4} parsed as offline player% &e%bestiaryGetFormat(round({event::farming::collected::%{_top::4}%}))%"
    broadcast ""
    broadcast "  &f%dateGetMonth({month})% %dateGetDay({day})% &f%uncolored dateGetYear({year})%"
    broadcast ""
    broadcast "&7&m                                                                  "


function dateStartMiningCarnival():

    set {event::mining::status} to true
    add 1 to {event::mining::amount}
    clear {event::mining::collected::*}

    make console execute command "hd setline eventNpcTag 1 &7&lCLICK"
    make console execute command "load mining"

    make console execute command "npc select 40"
    make console execute command "npc moveto -173 4 -40 world"

    play sound "BLOCK_NOTE_BLOCK_PLING" with volume 0.2 to all players
    play sound "BLOCK_NOTE_BLOCK_BELL" with volume 0.2 to all players
    
    broadcast "&7&m                                                                  "
    broadcast ""
    broadcast "  &3&lMINING CARNIVAL"
    broadcast ""
    broadcast "    &7Cole has visited Arland for his yearly Mining Carnival,"
    broadcast "    &7get down there and see what he has to offer!"
    broadcast ""
    broadcast "  &f%dateGetMonth({month})% %dateGetDay({day})% &f%uncolored dateGetYear({year})%"
    broadcast ""
    broadcast "&7&m                                                                  "

function dateEndMiningCarnival():

    set {event::mining::status} to false
    make console execute command "hd setline eventNpcTag 1 &7"
    make console execute command "load"

    make console execute command "npc select 40"
    make console execute command "npc moveto -634 1 -481 world"

    loop sorted indices of {event::mining::collected::*} in descending order:

        add 1 to {_counter}
        if {_counter} is less than 5:

            set {_user} to loop-value parsed as offline player
            set {_u} to uuid of {_user}
            set {_top::%{_counter}%} to {_u}
            add bucket of pufferfish of unbreaking 1 named "&cIndustrious Bucket" with lore "&7Event Trophie.", "", "&7A reward granted from placing", "&7%dateGetDay({_counter})% in the &3Mining Carnival &7event.", "",  "&c★★★★&8☆" and "&c&lSPECIAL" with all flags hidden to {event::rewards::%{_u}%::*}
        else:
            stop loop

    broadcast "&7&m                                                                  "
    broadcast ""
    broadcast "  &3&lMINING CARNIVAL"
    broadcast ""
    broadcast "    &fThank you everyone for participating, here's the top 4"
    broadcast "    &ffrom the Mining Carnival event:"
    broadcast ""
    broadcast "    &b1## &7%{_top::1} parsed as offline player% &3%bestiaryGetFormat(round({event::mining::collected::%{_top::1}%}))%"
    broadcast "    &b2## &7%{_top::2} parsed as offline player% &3%bestiaryGetFormat(round({event::mining::collected::%{_top::2}%}))%"
    broadcast "    &b3## &7%{_top::3} parsed as offline player% &3%bestiaryGetFormat(round({event::mining::collected::%{_top::3}%}))%"
    broadcast "    &b4## &7%{_top::4} parsed as offline player% &3%bestiaryGetFormat(round({event::mining::collected::%{_top::4}%}))%"
    broadcast ""
    broadcast "  &f%dateGetMonth({month})% %dateGetDay({day})% &f%uncolored dateGetYear({year})%"
    broadcast ""
    broadcast "&7&m                                                                  "

function dateStartWinterWonderland():

    set {event::winter::status} to true
    add 1 to {event::winter::amount}
    set {event::winter::show} to {event::winter::amount} - 1
    clear {event::snowball::collected::*}

    make console execute command "hd setline eventNpcTag 1 &7&lCLICK"
    make console execute command "load winter"

    make console execute command "npc select 37"
    make console execute command "npc moveto -173 4 -40 world"

    play sound "BLOCK_NOTE_BLOCK_PLING" with volume 0.2 to all players
    play sound "BLOCK_NOTE_BLOCK_BELL" with volume 0.2 to all players
    
    broadcast "&7&m                                                                  "
    broadcast ""
    broadcast "  &b&lWINTER WONDERLAND"
    broadcast ""
    broadcast "    &7Alfred is back with his snowball fight! Visit him at"
    broadcast "    &7his stand to buy gifts and participate in the event!"
    broadcast ""
    broadcast "  &f%dateGetMonth({month})% %dateGetDay({day})% &f%uncolored dateGetYear({year})%"
    broadcast ""
    broadcast "&7&m                                                                  "

function dateEndWinterWonderland():

    set {event::winter::status} to false
    make console execute command "hd setline eventNpcTag 1 &7"
    make console execute command "load"

    make console execute command "npc select 37"
    make console execute command "npc moveto -634 1 -481 world"

    loop sorted indices of {event::snowball::collected::*} in descending order:

        add 1 to {_counter}
        if {_counter} is less than 5:

            set {_user} to loop-value parsed as offline player
            set {_u} to uuid of {_user}
            set {_top::%{_counter}%} to {_u}
            
            add powder snow bucket of unbreaking 1 named "&cChilly Bucket" with lore "&7Event Trophie.", "", "&7A reward granted from placing", "&7%dateGetDay({_counter})% in the &bWinter Wonderland &7event.", "",  "&c★★★★★&8" and "&c&lSPECIAL" with all flags hidden to {event::rewards::%{_u}%::*}
        else:
            stop loop

    broadcast "&7&m                                                                  "
    broadcast ""
    broadcast "  &b&lWINTER WONDERLAND"
    broadcast ""
    broadcast "    &fThank you everyone for participating, here's the top 4"
    broadcast "    &ffrom the Winter Wonderland event:"
    broadcast ""
    broadcast "    &91## &7%{_top::1} parsed as offline player% &b%bestiaryGetFormat(round({event::snowball::collected::%{_top::1}%}))%"
    broadcast "    &92## &7%{_top::2} parsed as offline player% &b%bestiaryGetFormat(round({event::snowball::collected::%{_top::2}%}))%"
    broadcast "    &93## &7%{_top::3} parsed as offline player% &b%bestiaryGetFormat(round({event::snowball::collected::%{_top::3}%}))%"
    broadcast "    &94## &7%{_top::4} parsed as offline player% &b%bestiaryGetFormat(round({event::snowball::collected::%{_top::4}%}))%"
    broadcast ""
    broadcast "  &f%dateGetMonth({month})% %dateGetDay({day})% &f%uncolored dateGetYear({year})%"
    broadcast ""
    broadcast "&7&m                                                                  "

function dateStartNewYear():

    set {event::yearly::status} to true
    add 1 to {event::yearly::amount}
    set {event::yearly::show} to {event::yearly::amount} - 1

    make console execute command "hd setline eventNpcTag 1 &7&lCLICK"
    make console execute command "load year"

    make console execute command "npc select 38"
    make console execute command "npc moveto -173 4 -40 world"

    play sound "BLOCK_NOTE_BLOCK_PLING" with volume 0.2 to all players
    play sound "BLOCK_NOTE_BLOCK_BELL" with volume 0.2 to all players
    
    broadcast "&7&m                                                                  "
    broadcast ""
    broadcast "  &d&lNEW YEAR"
    broadcast ""
    broadcast "    &7Celebrate the clocking in of the new year. Buy some"
    broadcast "    &7fireworks from Aurora and have fun!"
    broadcast ""
    broadcast "  &f%dateGetMonth({month})% %dateGetDay({day})% &f%uncolored dateGetYear({year})%"
    broadcast ""
    broadcast "&7&m                                                                  "

function dateEndNewYear():

    set {event::yearly::status} to false
    make console execute command "hd setline eventNpcTag 1 &7"
    make console execute command "load"

    make console execute command "npc select 38"
    make console execute command "npc moveto -634 1 -481 world"

    broadcast "&7&m                                                                  "
    broadcast ""
    broadcast "  &d&lNEW YEAR"
    broadcast ""
    broadcast "    &7Thank you for attending the annual New Year event,"
    broadcast "    &7good luck in the new year!"
    broadcast ""
    broadcast "  &f%dateGetMonth({month})% %dateGetDay({day})% &f%uncolored dateGetYear({year})%"
    broadcast ""
    broadcast "&7&m                                                                  "

function dateCheckHour(day: integer):
    
    if {event::farming::status} is true:
        make console execute command "hd setline eventLeaderboard 2 &7Current farming leaderboard:"
        set {_counter} to 0
        loop sorted indices of {event::farming::collected::*} in descending order:

            add 1 to {_counter}
            if {_counter} is less than 5:

                set {_user} to loop-value parsed as offline player
                set {_u} to uuid of {_user}
                make console execute command "hd setline eventLeaderboard %{_counter} + 2% &6%{_counter}%## &7%{_user}% &e%bestiaryGetFormat(round({event::farming::collected::%{_u}%}))%"
            else:
                stop

        set {_times} to {_counter}
        set {_counter} to 0
        if {_counter} is not 5:
            # 2
            loop 4 times:
                add 1 to {_counter}
                make console execute command "hd setline eventLeaderboard %{_times} + {_counter} + 2% &6%{_times} + {_counter}%## &7None &e0"    
        make console execute command "hd setline eventLeaderboard 7 &8&oUpdates every 2 minutes..."

    else if {event::winter::status} is true:
        make console execute command "hd setline eventLeaderboard 2 &7Current snowball leaderboard:"
        set {_counter} to 0
        loop sorted indices of {event::snowball::collected::*} in descending order:

            add 1 to {_counter}
            if {_counter} is less than 5:

                set {_user} to loop-value parsed as offline player
                set {_u} to uuid of {_user}
                make console execute command "hd setline eventLeaderboard %{_counter} + 2% &9%{_counter}%## &7%{_user}% &b%bestiaryGetFormat(round({event::snowball::collected::%{_u}%}))%"
            else:
                stop

        set {_times} to {_counter}
        set {_counter} to 0
        if {_counter} is not 5:
            loop 4 times:
                add 1 to {_counter}
                make console execute command "hd setline eventLeaderboard %{_times} + {_counter} + 2% &9%{_times} + {_counter}%## &7None &b0"    
        make console execute command "hd setline eventLeaderboard 7 &8&oUpdates every 2 minutes..."

    else if {event::mining::status} is true:
        make console execute command "hd setline eventLeaderboard 2 &7Current mining leaderboard:"
        set {_counter} to 0
        loop sorted indices of {event::mining::collected::*} in descending order:

            add 1 to {_counter}
            if {_counter} is less than 5:

                set {_user} to loop-value parsed as offline player
                set {_u} to uuid of {_user}
                make console execute command "hd setline eventLeaderboard %{_counter} + 2% &b%{_counter}%## &7%{_user}% &3%bestiaryGetFormat(round({event::mining::collected::%{_u}%}))%"
            else:
                stop

        set {_times} to {_counter}
        set {_counter} to 0
        if {_counter} is not 5:
            loop 4 times:
                add 1 to {_counter}
                make console execute command "hd setline eventLeaderboard %{_times} + {_counter} + 2% &b%{_times} + {_counter}%## &7None &30"    
        make console execute command "hd setline eventLeaderboard 7 &8&oUpdates every 2 minutes..."

    else if {event::yearly::status} is true:

        make console execute command "hd setline eventLeaderboard 2 &7Celebrate the clocking in of the new year"
        make console execute command "hd setline eventLeaderboard 3 &7by buying some fireworks from &dAurora&7."
        make console execute command "hd setline eventLeaderboard 4 &7"
        make console execute command "hd setline eventLeaderboard 5 &7The time until the new year is:"
        set {_to} to dateGetTimeTo("Dec 31th %uncolored dateGetYear({event::yearly::show})%")
        make console execute command "hd setline eventLeaderboard 6 &7&f%{_to}%"
        make console execute command "hd setline eventLeaderboard 7 &7Get ready!"

    else:
        make console execute command "hd setline eventLeaderboard 2 &7There is currently no active event"
        make console execute command "hd setline eventLeaderboard 3 &7happening, check your calendar."
        make console execute command "hd setline eventLeaderboard 4 &7"
        loop 3 times:
            add 1 to {_counter}
            set {_next::*} to dateGetNextEvent({_counter}) split at ":"
            set {_name} to {_next::1}
            set {_year} to uncolored {_next::2}
            make console execute command "hd setline eventLeaderboard %{_counter} + 4% %{_name}% &7(&f%dateGetTimeTo({_next::2})%&7)"

    send "The hour have been checked." to console

function dateCheckDay(day: integer):

    if {_day} is 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 or 30:
        if {month} is 4, 7 or 10:
            if {_day} is not 17:
                if {event::farming::status} is not true:
                    dateStartFarmingFestival()
            else:
                play sound "BLOCK_NOTE_BLOCK_PLING" with volume 0.2 to all players
                play sound "BLOCK_NOTE_BLOCK_BELL" with volume 0.2 to all players
                broadcast "&7&m                                                                  "
                broadcast ""
                broadcast "  &e&lFARMING FESTIVAL"
                broadcast ""
                broadcast "    &7The event will start tomorrow. Grab your farming tools"
                broadcast "    &7and get yourself ready for the the competition!"
                broadcast ""
                broadcast "  &f%dateGetMonth({month})% %dateGetDay({day})% &f%uncolored dateGetYear({year})%"
                broadcast ""
                broadcast "&7&m                                                                  "
        else:
            if {event::farming::status} is true:
                dateEndFarmingFestival()
    else:
        if {event::farming::status} is true:
            dateEndFarmingFestival()

    if {_day} is 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 or 30:
        if {month} is 2:
            if {_day} is not 5:
                if {event::mining::status} is not true:
                    dateStartMiningCarnival()
            else:
                play sound "BLOCK_NOTE_BLOCK_PLING" with volume 0.2 to all players
                play sound "BLOCK_NOTE_BLOCK_BELL" with volume 0.2 to all players
                broadcast "&7&m                                                                  "
                broadcast ""
                broadcast "  &3&lMINING CARNIVAL"
                broadcast ""
                broadcast "    &7The event will start tomorrow. It's time to grab your"
                broadcast "    &7shovel and get down to the mine!"
                broadcast ""
                broadcast "  &f%dateGetMonth({month})% %dateGetDay({day})% &f%uncolored dateGetYear({year})%"
                broadcast ""
                broadcast "&7&m                                                                  "
        else:
            if {event::mining::status} is true:
                dateEndMiningCarnival()
    else:
        if {event::mining::status} is true:
            dateEndMiningCarnival()

    if {_day} is not 25, 26, 27 or 28:
        if {month} is 11:
            if {_day} is 31:
                if {event::winter::status} is not true:
                    dateStartWinterWonderland()
            else if {_day} is 30:
                play sound "BLOCK_NOTE_BLOCK_PLING" with volume 0.2 to all players
                play sound "BLOCK_NOTE_BLOCK_BELL" with volume 0.2 to all players
                broadcast "&7&m                                                                  "
                broadcast ""
                broadcast "  &b&lWINTER WONDERLAND"
                broadcast ""
                broadcast "    &7The event will start tomorrow. Get ready for a"
                broadcast "    &7winter wonderland and a lot of snowballs!"
                broadcast ""
                broadcast "  &f%dateGetMonth({month})% %dateGetDay({day})% &f%uncolored dateGetYear({year})%"
                broadcast ""
                broadcast "&7&m                                                                  "
        else if {month} is not 12:
            if {event::winter::status} is true:
                dateEndWinterWonderland()
    else:
        if {event::winter::status} is true:
            dateEndWinterWonderland()

    if {_day} is 1, 2, 26, 27, 28, 29 or 30:
        if {month} is 12:
            if {_day} is not 26, 1 or 2:
                if {event::yearly::status} is not true:
                    dateStartNewYear()
            else if {_day} is not 30, 1 or 2:
                play sound "BLOCK_NOTE_BLOCK_PLING" with volume 0.2 to all players
                play sound "BLOCK_NOTE_BLOCK_BELL" with volume 0.2 to all players
                broadcast "&7&m                                                                  "
                broadcast ""
                broadcast "  &d&lNEW YEAR"
                broadcast ""
                broadcast "    &7The event will start tomorrow. Get yourself ready"
                broadcast "    &7for the annual clocking in of the new year!"
                broadcast ""
                broadcast "  &f%dateGetMonth({month})% %dateGetDay({day})% &f%uncolored dateGetYear({year})%"
                broadcast ""
                broadcast "&7&m                                                                  "
        else if {month} is 1:
            if {_day} is 2:
                if {event::yearly::status} is true:
                    dateEndNewYear()
    else:
        if {event::yearly::status} is true:
            dateEndNewYear()   

    send "The day have been checked." to console

function dateCheckMonth(month: integer):

    send "The month have been checked." to console

function dateCheckYear(year: integer):

    dateLaunchFireworks()
    send "The year have been checked." to console

function dateGetDay(day: integer) :: string:

    if {_day} is 1, 31 or 21:
        return "%{_day}%st"
    else if {_day} is 2 or 22:
        return "%{_day}%nd"
    else if {_day} is 3 or 23:
        return "%{_day}%rd"
    else:
        return "%{_day}%th"

function dateGetMonth(month: integer) :: string:

    if {month} = 1:
        return "Jan"
    else if {month} = 2:
        return "Feb"
    else if {month} = 3:
        return "Mar"
    else if {month} = 4:
        return "Apr"
    else if {month} = 5:
        return "May"
    else if {month} = 6:
        return "Jun"
    else if {month} = 7:
        return "Jul"
    else if {month} = 8:
        return "Aug"
    else if {month} = 9:
        return "Sep"
    else if {month} = 10:
        return "Oct"
    else if {month} = 11:
        return "Nov"
    else if {month} = 12:
        return "Dec"

function dateGetMonthInteger(month: string) :: integer:

    if {_month} is "Jan":
        return 1
    else if {_month} is "Feb":
        return 2
    else if {_month} is "Mar":
        return 3
    else if {_month} is "Apr":
        return 4
    else if {_month} is "May":
        return 5
    else if {_month} is "Jun":
        return 6
    else if {_month} is "Jul":
        return 7
    else if {_month} is "Aug":
        return 8
    else if {_month} is "Sep":
        return 9
    else if {_month} is "Oct":
        return 10
    else if {_month} is "Nov":
        return 11
    else if {_month} is "Dec":
        return 12

function dateGetYear(year: integer) :: string:

    if {year} is not 0:
        return "Year &3%{year}%"
    else:
        return ""

function dateGetTime(hour: integer) :: string:

    if {hour} is between 23 and 24:
        return "&7Night <##262a59>☽"
    else if {hour} is between 0 and 5:
        return "&7Night <##262a59>☽"
    else if {hour} is between 6 and 11:
        return "&7Morning <##fcd14d>☀"
    else if {hour} is between 12 and 16:
        return "&7Day <##FDB813>☀"
    else if {hour} is between 17 and 22:
        return "&7Evening <##fd8c13>☀"

function dateGetNextEvent(position: integer) :: string:

    set {_counter} to 0
    set {_farming} to 0
    set {_winter} to 0
    set {_yearly} to 0
    set {_mining} to 0

    loop 40 times:

        if {_counter} is between 0 and 9:
            set {_event} to dateEventGetTime("%{event::winter::amount} + {_winter}% Winter Wonderland")
            add 1 to {_winter}
        else if {_counter} is between 10 and 19:
            set {_event} to dateEventGetTime("%{event::farming::amount} + {_farming}% Farming Festival")
            add 1 to {_farming}
        else if {_counter} is between 20 and 29:
            set {_event} to dateEventGetTime("%{event::yearly::amount} + {_yearly}% New Year")
            add 1 to {_yearly}
        else if {_counter} is between 30 and 39:
            set {_event} to dateEventGetTime("%{event::mining::amount} + {_mining}% Mining Carnival")
            add 1 to {_mining}

        set {_event::*} to {_event} split at " "
        set {_month} to dateGetMonthInteger({_event::1})
        
        set {_remove::*} to split {_event::2} at "st"
        if {_remove::2} is not set:
            set {_remove::*} to split {_event::2} at "nd"
        if {_remove::2} is not set:
            set {_remove::*} to split {_event::2} at "rd"
        if {_remove::2} is not set:
            set {_remove::*} to split {_event::2} at "th"
    
        set {_days} to (({_month} * 30)) + ({_event::4} parsed as integer * 360) + ({_remove::1} parsed as integer)

        add {_days} to {_events::*}
        set {_return::%{_days}%} to {_event}

        add 1 to {_counter}

    set {_counter} to 0
    loop sorted indices of {_events::*} in ascending order:
        add 1 to {_counter}
        if {_counter} is {_position}: 
            set {_var::*} to split "%{_return::%{_events::%loop-value%}%}%" at " "
            if {_var::2} is "1st":
                return "&b%dateGetDay({_var::4} parsed as integer)% Winter Wonderland:%{_return::%{_events::%loop-value%}%}%"
            else if {_var::2} is "18th":
                return "&eFarming Festival:%{_return::%{_events::%loop-value%}%}%"
            else if {_var::2} is "6th":
                return "&3Mining Carnival:%{_return::%{_events::%loop-value%}%}%"
            else if {_var::2} is "29th":
                return "&d%dateGetDay({_var::4} parsed as integer)% New Year:%{_return::%{_events::%loop-value%}%}%"

function dateEventGetTime(event: string) :: string:

    set {_event::*} to {_event} split at " "
    if {_event::3} is "Wonderland":
        set {_active} to "winter"
    else if "%{_event::2}% %{_event::3}%" is "Farming Festival":
        set {_active} to "farming"
    else if "%{_event::2}% %{_event::3}%" is "Mining Carnival":
        set {_active} to "mining"
    else if {_event::3} is "Year":
        set {_active} to "yearly"
    else:
        stop trigger

    set {_number} to {_event::1} parsed as integer

    if {_active} is "winter":
        return "Dec 1st Year %{_number}%"
    else if {_active} is "farming":
        
        if ({_number} - 1) mod 3 is 0:
            set {_month} to "Apr"
        else if ({_number} - 1) mod 3 is 1:
            set {_month} to "Jul"
        else if ({_number} - 1) mod 3 is 2:
            set {_month} to "Oct"
        
        return "%{_month}% 18th Year %ceil({_number} / 3) - 1%"
    else if {_active} is "mining":
        return "Feb 6th Year %{_number} * 2%"
    else if {_active} is "yearly":
        return "Dec 29th Year %{_number}%"

function dateGetTimeTo(time: string) :: string:

    set {_event::*} to {_time} split at " "
    set {_month} to dateGetMonthInteger({_event::1})
        
    set {_remove::*} to split {_event::2} at "st"
    if {_remove::2} is not set:
        set {_remove::*} to split {_event::2} at "nd"
    if {_remove::2} is not set:
        set {_remove::*} to split {_event::2} at "rd"
    if {_remove::2} is not set:
        set {_remove::*} to split {_event::2} at "th"
    set {_days} to (({_month} * 30)) + ({_event::4} parsed as integer * 360) + ({_remove::1} parsed as integer)
    set {_hours} to ({_days} - 30) * 24
    set {_timeTo} to {_hours} * 60 + {minute}

    set {_days2} to (({month} * 30)) + ({year} * 360) + ({day})
    set {_hours2} to (({_days2} - 30) * 24) + {hour}
    set {_timeNow} to {_hours2} * 60 + {minute}
    set {_difference} to ({_timeTo} - {_timeNow})

    set {_getSeconds} to ({_difference} / 3) * 0.75
    set {_getMinutes} to {_getSeconds} / 60
    set {_getHours} to {_getMinutes} / 60
    set {_getDays} to {_getHours} / 24

    if {_getDays} is greater than 1:
        return "%round({_getDays})% days"
    else if {_getHours} is greater than 1:
        return "%round({_getHours})% hours"
    else if {_getMinutes} is greater than 1:
        return "%round({_getMinutes})% minutes"
    else if {_getSeconds} is greater than 1:
        return "%round({_getSeconds})% seconds"
    else:
        return "0 seconds"

function dateCreateCalendar(player: player, name: string):

    set metadata tag "calendar" of {_player} to chest with 6 row named "%{_name}%"
    
    set {_u} to uuid of {_player}
    set {_borderIndex} to 0
    set {_counter} to 0

    loop 54 times:

        if {_borderIndex} is not 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 29, 30, 31, 32 or 33:
            set slot {_borderIndex} of metadata tag "calendar" of {_player} to black stained glass pane named "&8Border"

        if {_borderIndex} is 10, 16, 19, 25, 28 or 34:
            set slot {_borderIndex} of metadata tag "calendar" of {_player} to gray stained glass pane named "&7Border"

        if {_borderIndex} is 49:
            set slot {_borderIndex} of metadata tag "calendar" of {_player} to barrier named "&cClose"

        if {_borderIndex} is 48:

            set {_rewards} to chest named "<##5EB6B6>Rewards" with lore "&7You can claim rewards that you", "&7have stacked up from the" and "&7calendar events here."
            if size of {event::rewards::%{_u}%::*} is greater than 0:

                add "" and "&7&nRewards:" to lore of {_rewards}
                loop {event::rewards::%{_u}%::*}:
                    add "&8- &7%item amount of loop-value-2%x %uncolored name of loop-value-2%" to lore of {_rewards}
                add "" and "&eClaim (Right Click)" to lore of {_rewards}
            else:
                add "" and "&cNo rewards!" to lore of {_rewards}

            set slot {_borderIndex} of metadata tag "calendar" of {_player} to {_rewards}

        if {_borderIndex} is 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 29, 30, 31, 32 or 33:
            
            add 1 to {_counter}
            set {_next::*} to dateGetNextEvent({_counter}) split at ":"
            set {_name} to {_next::1}
            set {_year} to uncolored {_next::2}

            if uncolored {_name} contains "Wonderland":
                set slot {_borderIndex} of metadata tag "calendar" of {_player} to powder snow bucket named "%{_name}%" with lore "&7The yearly winter time event for", "&7all the players to enjoy.", "", "&7Server date: &f%{_year}%", "&7Starting in: &f%dateGetTimeTo({_year})%"
            else if uncolored {_name} contains "Farming Festival":
                set slot {_borderIndex} of metadata tag "calendar" of {_player} to wheat named "%{_name}%" with lore "&7Seasonal festival for all the", "&7farmers on the server.", "", "&7Server date: &f%{_year}%", "&7Starting in: &f%dateGetTimeTo({_year})%"
            else if uncolored {_name} contains "Mining Carnival":
                set slot {_borderIndex} of metadata tag "calendar" of {_player} to prismarine shard named "%{_name}%" with lore "&7Cole visits the server for", "&7the infrequent Mining Carnival.", "", "&7Server date: &f%{_year}%", "&7Starting in: &f%dateGetTimeTo({_year})%"
            else if uncolored {_name} contains "Year":
                set slot {_borderIndex} of metadata tag "calendar" of {_player} to cake named "%{_name}%" with lore "&7Clocking in the new year", "&7with fireworks and happiness.", "", "&7Server date: &f%{_year}%", "&7Starting in: &f%dateGetTimeTo({_year})%"

        add 1 to {_borderIndex}

    open (metadata tag "calendar" of {_player}) to {_player}

on inventory click:

    if event-inventory = (metadata tag "calendar" of player):

        cancel event

        if index of event-slot is 49:
            open (metadata tag "menu" of player) to player
        else if index of event-slot is 48:

            if size of {event::rewards::%player's uuid%::*} is greater than 0:

                loop {event::rewards::%player's uuid%::*}:
                    give loop-value to player
                clear {event::rewards::%player's uuid%::*}
                play sound "ENTITY_PLAYER_LEVELUP" with volume 0.2 to player
                dateCreateCalendar(player, "&8Remote Calendar")

every 30 ticks:

    add 6 to {minute}

    if {minute} >= 60:

        set {minute} to 0
        add 1 to {hour}
        dateCheckHour({hour})
    
    if {hour} >= 24:
        set {hour} to 0
        add 1 to {day}
        dateCheckDay({day})
        dateCheckHour({hour})

    if {day} > 30:
        set {day} to 1
        add 1 to {month}
        dateCheckMonth({month})

    if {month} > 12:
        set {month} to 1
        add 1 to {year}
        dateCheckYear({year})

    set {_time} to 0.01 * (24000 / 24) * (({hour} * 100) + ({minute} * 1.66666666667))

    if {_time} is between 0 and 6000:
        set {_time} to 0.01 * (24000 / 24) * ((({hour} + 18) * 100) + ({minute} * 1.66666666667))
    else if {_time} is between 6000 and 12000:
        set {_time} to 0.01 * (24000 / 24) * ((({hour} - 6) * 100) + ({minute} * 1.66666666667)) # 12000
    else if {_time} is between 12000 and 18000:
        set {_time} to 0.01 * (24000 / 24) * ((({hour} - 6) * 100) + ({minute} * 1.66666666667)) # 18000
    else if {_time} is between 18000 and 24000:
        set {_time} to 0.01 * (24000 / 24) * ((({hour} - 6) * 100) + ({minute} * 1.66666666667))
    
    make console execute command "time set %{_time}%"

command /clock [<text>] [<text>] [<integer>] [<text>]:
    permission: op
    permission message: Unknown command. Type "/help" for help.
    trigger:

        if arg-1 is set:

            if arg-1 is "month":

                if arg-2 is set:

                    if arg-2 is "set":

                        if arg-3 is set:

                            if arg-3 is 1:
                                set {month} to 1
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>January&f." 
                            else if arg-3 is 2:
                                set {month} to 2
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>February&f." 
                            else if arg-3 is 3:
                                set {month} to 3
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>March&f." 
                            else if arg-3 is 4:
                                set {month} to 4
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>April&f." 
                            else if arg-3 is 5:
                                set {month} to 5
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>May&f." 
                            else if arg-3 is 6:
                                set {month} to 6
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>June&f." 
                            else if arg-3 is 7:
                                set {month} to 7
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>July&f." 
                            else if arg-3 is 8:
                                set {month} to 8
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>August&f." 
                            else if arg-3 is 9:
                                set {month} to 9
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>September&f."
                            else if arg-3 is 10:
                                set {month} to 10
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>October&f." 
                            else if arg-3 is 11:
                                set {month} to 11
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>November&f." 
                            else if arg-3 is 12:
                                set {month} to 12
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>December&f." 
                            else:
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a valid month."

                        else:
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a month."
                    
                    else:
                        send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option."

                else:
                    send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option." 

            else if arg-1 is "year":

                if arg-2 is set:

                    if arg-2 is "set":

                        if arg-3 is set:

                            set {year} to arg-3
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fYear has been set to <##5EB6B6>%{year}%&f."

                        else:
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a year."
                    
                    else:
                        send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option."

                else:
                    send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option." 

            else if arg-1 is "day":

                if arg-2 is set:

                    if arg-2 is "set":

                        if arg-3 is set:

                            set {day} to arg-3
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fDay has been set to <##5EB6B6>%{day}%&f."

                        else:
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a day."
                    
                    else:
                        send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option."

                else:
                    send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option." 
            else if arg-1 is "hour":

                if arg-2 is set:

                    if arg-2 is "set":

                        if arg-3 is set:

                            set {hour} to arg-3
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fHour has been set to <##5EB6B6>%{hour}%&f."

                        else:
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a hour."
                    
                    else:
                        send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option."

                else:
                    send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option." 
            else if arg-1 is "minute":

                if arg-2 is set:

                    if arg-2 is "set":

                        if arg-3 is set:

                            set {minute} to arg-3
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMinute has been set to <##5EB6B6>%{minute}%&f."

                        else:
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a minute."
                    
                    else:
                        send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option."

                else:
                    send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option." 

            else:
                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cThis command option does not exist."

        else:
            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option." 

on tab complete of "/clock":

    if tab arg-1 is not "minute", "hour", "day", "month" or "year": # add new options  
        clear {_tabCompletion::*}
        set {_tabCompletion::*} to ("minute", "hour", "day", "month" and "year") # add new options
        set tab completions for position 1 to {_tabCompletion::*}

    if tab arg-1 is "minute", "hour", "day", "month" or "year":
        if tab arg-2 is not "set": # add new options  
            clear {_tabCompletion::*}
            set {_tabCompletion::*} to ("set") # add new options
            set tab completions for position 2 to {_tabCompletion::*}
