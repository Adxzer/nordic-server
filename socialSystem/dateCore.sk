function dateCheckHour(day: integer):

    send "The hour have been checked." to console

function dateCheckDay(day: integer):

    send "The day have been checked." to console

function dateCheckMonth(month: integer):

    send "The month have been checked." to console

function dateCheckYear(year: integer):

    send "The year have been checked." to console

function dateGetDay(day: integer) :: string:

    if {day} is 1, 31 or 21:
        return "%{day}%st"
    else if {day} is 2 or 22:
        return "%{day}%nd"
    else if {day} is 3 or 23:
        return "%{day}%rd"
    else:
        return "%{day}%th"

function dateGetMonth(month: integer) :: string:

    if {month} = 1:
        return "Jan"
    else if {month} = 2:
        return "Feb"
    else if {month} = 3:
        return "Mar"
    else if {month} = 4:
        return "Apr"
    else if {month} = 5:
        return "May"
    else if {month} = 6:
        return "Jun"
    else if {month} = 7:
        return "Jul"
    else if {month} = 8:
        return "Aug"
    else if {month} = 9:
        return "Sep"
    else if {month} = 10:
        return "Oct"
    else if {month} = 11:
        return "Nov"
    else if {month} = 12:
        return "Dec"

function dateGetYear(year: integer) :: string:

    if {year} is not 0:
        return "Year &3%{year}%"
    else:
        return ""

function dateGetTime(hour: integer) :: string:

    if {hour} is between 23 and 24:
        return "&7Night <##262a59>☽"
    else if {hour} is between 0 and 5:
        return "&7Night <##262a59>☽"
    else if {hour} is between 6 and 11:
        return "&7Morning <##fcd14d>☀"
    else if {hour} is between 12 and 16:
        return "&7Day <##FDB813>☀"
    else if {hour} is between 17 and 22:
        return "&7Evening <##fd8c13>☀"

#function dateReturnNextEvents(amount: integer) :: strings:


function dateGetNextEvent(position: integer) :: string:

    set {_counter} to 0
    set {_farming} to 0
    set {_winter} to 0
    set {_yearly} to 0

    loop 30 times:

        if {_counter} is between 0 and 9:
            set {_event} to dateEventGetTime("%{event::winter::amount} + {_winter}% Winter Wonderland")
            add 1 to {_winter}
        else if {_counter} is between 10 and 19:
            set {_event} to dateEventGetTime("%{event::farming::amount} + {_farming}% Farming Festival")
            add 1 to {_farming}
        else if {_counter} is between 20 and 29:
            set {_event} to dateEventGetTime("%{event::yearly::amount} + {_yearly}% New Year")
            add 1 to {_yearly}

        set {_event::*} to {_event} split at " "
        if {_event::1} is "Jan":
            set {_month} to 1
        else if {_event::1} is "Feb":
            set {_month} to 2
        else if {_event::1} is "Mar":
            set {_month} to 3
        else if {_event::1} is "Apr":
            set {_month} to 4
        else if {_event::1} is "May":
            set {_month} to 5
        else if {_event::1} is "Jun":
            set {_month} to 6
        else if {_event::1} is "Jul":
            set {_month} to 7
        else if {_event::1} is "Aug":
            set {_month} to 8
        else if {_event::1} is "Sep":
            set {_month} to 9
        else if {_event::1} is "Oct":
            set {_month} to 10
        else if {_event::1} is "Nov":
            set {_month} to 11
        else if {_event::1} is "Dec":
            set {_month} to 12
        
        set {_remove::*} to split {_event::2} at "st", "nd", "rd" or "th"
        set {_days} to (({_month} * 30)) + ({_event::4} parsed as integer * 360) + ({_remove::1} parsed as integer)

        add {_days} to {_events::*}
        set {_return::%{_days}%} to {_event}

        add 1 to {_counter}

    set {_counter} to 0
    loop sorted indices of {_events::*} in ascending order:
        add 1 to {_counter}
        if {_counter} is {_position}:   
            return {_return::%{_events::%loop-value%}%}
        

function dateEventGetTime(event: string) :: string:

    set {_event::*} to {_event} split at " "
    if {_event::3} is "Wonderland":
        set {_active} to "winter"
    else if "%{_event::2}% %{_event::3}%" is "Farming Festival":
        set {_active} to "farming"
    else if {_event::3} is "Year":
        set {_active} to "yearly"
    else:
        stop trigger

    #set {_number} to {event::%{_active}%::amount}
    set {_number} to {_event::1} parsed as integer

    if {_active} is "winter":
        return "Dec 1st Year %{_number}%"
    else if {_active} is "farming":
        
        if ({_number} - 1) mod 3 is 0:
            set {_month} to "Apr"
        else if ({_number} - 1) mod 3 is 1:
            set {_month} to "Jul"
        else if ({_number} - 1) mod 3 is 2:
            set {_month} to "Oct"
    
        return "%{_month}% 18th Year %ceil({_number} / 1)%"
    else if {_active} is "yearly":
        return "Dec 29th Year %{_number}%"

command /test:
    permission: op
    trigger:
        set {event::yearly::amount} to 1
        #send dateEventGetTime("4 Winter Wonderland")
       # send "this event will be: %dateEventGetTime("3 Winter Wonderland")%." to player
        send "the next event is: %dateGetNextEvent(30)%." to player

every 15 ticks:

    add 1 to {minute}

    if {minute} >= 60:

        set {minute} to 0
        add 1 to {hour}
        dateCheckHour({hour})
    
    if {hour} >= 24:
        set {hour} to 0
        add 1 to {day}
        dateCheckDay({day})

    if {day} >= 31:
        set {day} to 1
        add 1 to {month}
        dateCheckMonth({month})

    if {month} >= 12:
        set {month} to 1
        add 1 to {year}
        dateCheckYear({year})

    set {_time} to 0.01 * (24000 / 24) * (({hour} * 100) + ({minute} * 1.66666666667))

    if {_time} is between 0 and 6000:
        set {_time} to 0.01 * (24000 / 24) * ((({hour} + 18) * 100) + ({minute} * 1.66666666667))
    else if {_time} is between 6000 and 12000:
        set {_time} to 0.01 * (24000 / 24) * ((({hour} - 6) * 100) + ({minute} * 1.66666666667)) # 12000
    else if {_time} is between 12000 and 18000:
        set {_time} to 0.01 * (24000 / 24) * ((({hour} - 6) * 100) + ({minute} * 1.66666666667)) # 18000
    else if {_time} is between 18000 and 24000:
        set {_time} to 0.01 * (24000 / 24) * ((({hour} - 6) * 100) + ({minute} * 1.66666666667))
    
    make console execute command "time set %{_time}%"


command /clock [<text>] [<text>] [<integer>] [<text>]:
    permission: op
    permission message: Unknown command. Type "/help" for help.
    trigger:

        if arg-1 is set:

            if arg-1 is "month":

                if arg-2 is set:

                    if arg-2 is "set":

                        if arg-3 is set:

                            if arg-3 is 1:
                                set {month} to 1
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>January&f." 
                            else if arg-3 is 2:
                                set {month} to 2
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>February&f." 
                            else if arg-3 is 3:
                                set {month} to 3
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>March&f." 
                            else if arg-3 is 4:
                                set {month} to 4
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>April&f." 
                            else if arg-3 is 5:
                                set {month} to 5
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>May&f." 
                            else if arg-3 is 6:
                                set {month} to 6
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>June&f." 
                            else if arg-3 is 7:
                                set {month} to 7
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>July&f." 
                            else if arg-3 is 8:
                                set {month} to 8
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>August&f." 
                            else if arg-3 is 9:
                                set {month} to 9
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>September&f."
                            else if arg-3 is 10:
                                set {month} to 10
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>October&f." 
                            else if arg-3 is 11:
                                set {month} to 11
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>November&f." 
                            else if arg-3 is 12:
                                set {month} to 12
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMonth has been set to <##5EB6B6>December&f." 
                            else:
                                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a valid month."

                        else:
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a month."
                    
                    else:
                        send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option."

                else:
                    send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option." 

            else if arg-1 is "year":

                if arg-2 is set:

                    if arg-2 is "set":

                        if arg-3 is set:

                            set {year} to arg-3
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fYear has been set to <##5EB6B6>%{year}%&f."

                        else:
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a year."
                    
                    else:
                        send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option."

                else:
                    send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option." 

            else if arg-1 is "day":

                if arg-2 is set:

                    if arg-2 is "set":

                        if arg-3 is set:

                            set {day} to arg-3
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fDay has been set to <##5EB6B6>%{day}%&f."

                        else:
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a day."
                    
                    else:
                        send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option."

                else:
                    send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option." 
            else if arg-1 is "hour":

                if arg-2 is set:

                    if arg-2 is "set":

                        if arg-3 is set:

                            set {hour} to arg-3
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fHour has been set to <##5EB6B6>%{hour}%&f."

                        else:
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a hour."
                    
                    else:
                        send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option."

                else:
                    send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option." 
            else if arg-1 is "minute":

                if arg-2 is set:

                    if arg-2 is "set":

                        if arg-3 is set:

                            set {minute} to arg-3
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &fMinute has been set to <##5EB6B6>%{minute}%&f."

                        else:
                            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a minute."
                    
                    else:
                        send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option."

                else:
                    send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option." 

            else:
                send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cThis command option does not exist."

        else:
            send "<##508a7f>[<##5EB6B6>&lCLOCK<##508a7f>] » &cPlease specify a command option." 

on tab complete of "/clock":

    if tab arg-1 is not "minute", "hour", "day", "month" or "year": # add new options  
        clear {_tabCompletion::*}
        set {_tabCompletion::*} to ("minute", "hour", "day", "month" and "year") # add new options
        set tab completions for position 1 to {_tabCompletion::*}

    if tab arg-1 is "minute", "hour", "day", "month" or "year":
        if tab arg-2 is not "set": # add new options  
            clear {_tabCompletion::*}
            set {_tabCompletion::*} to ("set") # add new options
            set tab completions for position 2 to {_tabCompletion::*}
