function abilityUse(player: player, ability: string, cooldown: integer, mana: integer):

    set {_u} to uuid of {_player}

    set {ability::%{_ability}%::%{_u}%} to true
    send action bar coreGetActionBar({_player}, "&6You used %{_ability}%!") to {_player}
    remove {_mana} from {mana::currentMana::%{_u}%}
    if {_cooldown} is not 0:
        wait "%{_cooldown}% seconds" parsed as timespan
    set {ability::%{_ability}%::%{_u}%} to false


function abilityCheckOtherActive(player: player) :: boolean:
    
    set {_u} to uuid of {_player}
    set {_list::*} to ("transmission", "explosion", "sight", "inferno", "shine", "venom", "expiry" and "restore")
    
    loop {_list::*}:

        if {ability::%loop-value%::status::%{_u}%} is true:
            set {_return} to true
            stop loop
        else:
            set {_return} to false

    return {_return}
     

on rightclick:

    if player's tool is not air:
        
        set {_lore::*} to lore of player's tool
        set {_u} to uuid of player
        
        loop {_lore::*}:
            if uncolored loop-value contains "Item Ability:":
                set {_abilityTemp::*} to split uncolored loop-value at ": "
                set {_ability::*} to split {_abilityTemp::2} at " ("
                set {_ability} to {_ability::1}
            else if uncolored loop-value contains "Damage:":
                set {_damage::*} to split uncolored loop-value at " +"
                set {_damage} to {_damage::2} parsed as an integer
            else if uncolored loop-value contains "Expense:":
                set {_mana::*} to split uncolored loop-value at "✦"
                set {_mana} to {_mana::2} parsed as an integer
            else if uncolored loop-value contains "Cooldown:":
                set {_cooldownTemp::*} to split uncolored loop-value at ": "
                set {_cooldown::*} to split {_cooldownTemp::2} at " "
                set {_cooldown} to {_cooldown::1} parsed as an integer
            else if uncolored loop-value contains "Level":
                set {_level::*} to split uncolored loop-value at "⚗"
                set {_level} to {_level::2} parsed as integer
        
        if {_ability} is set:
            
            if {_ability::2} is "Right Click)":

                if {level::%{_u}%} >= {_level}:

                    if {ability::%{_ability}%::%player's uuid%} is true:
                        set {actionBarSet::%{_u}%} to true
                        send action bar coreGetActionBar(player, "&cThis item has a cooldown!") to player
                        wait 1 second
                        set {actionBarSet::%{_u}%} to false
                        stop trigger

                    else:

                        if abilityCheckOtherActive(player) is false:

                            if {mana::currentMana::%player's uuid%} >= {_mana}:
                                if {_ability} is "Transmission":
                                    if abilityCheckTransmission(player) is not false:
                                        abilityUse(player, {_ability}, {_cooldown}, {_mana})
                                        abilityUseTransmission(player)
                                else if {_ability} is "Explosion":
                                    if abilityCheckExplosion(player, {_damage}) is not false:
                                        abilityUse(player, {_ability}, {_cooldown}, {_mana})
                                else if {_ability} is "Expiry":
                                    if abilityCheckExpiry(player) is not false:
                                        abilityUse(player, {_ability}, {_cooldown}, {_mana})
                                        abilityUseExpiry(player)
                                else if {_ability} is "Sight":
                                    if abilityCheckSight(player) is not false:
                                        abilityUse(player, {_ability}, {_cooldown}, {_mana})
                                        abilityUseSight(player)
                                else if {_ability} is "Restore":
                                    if abilityCheckRestore(player) is not false:
                                        abilityUse(player, {_ability}, {_cooldown}, {_mana})
                                        abilityUseRestore(player)
                                else if {_ability} is "Inferno":
                                    if abilityCheckInferno(player) is not false:
                                        abilityUse(player, {_ability}, {_cooldown}, {_mana})
                                        abilityUseInferno(player)

                            else:
                                set {actionBarSet::%{_u}%} to true
                                send action bar coreGetActionBar(player, "&cNot enough mana!") to player
                                wait 1 second
                                set {actionBarSet::%{_u}%} to false
                                stop trigger
                            
                        else:
                            set {actionBarSet::%{_u}%} to true
                            send action bar coreGetActionBar(player, "&cYou are already using one ability!") to player
                            wait 1 second
                            set {actionBarSet::%{_u}%} to false
                            stop trigger

                else:
                    set {actionBarSet::%{_u}%} to true
                    send action bar coreGetActionBar(player, "&cNot required level!") to player
                    wait 1 second
                    set {actionBarSet::%{_u}%} to false
                    stop trigger

on leftclick:

    if player's tool is not air:
        
        set {_lore::*} to lore of player's tool
        set {_u} to uuid of player

        loop {_lore::*}:
            if uncolored loop-value contains "Item Ability:":
                set {_abilityTemp::*} to split uncolored loop-value at ": "
                set {_ability::*} to split {_abilityTemp::2} at " ("
                set {_ability} to {_ability::1}
            else if uncolored loop-value contains "Expense:":
                set {_mana::*} to split uncolored loop-value at "✦"
                set {_mana} to {_mana::2} parsed as an integer
            else if uncolored loop-value contains "Cooldown:":
                set {_cooldownTemp::*} to split uncolored loop-value at ": "
                set {_cooldown::*} to split {_cooldownTemp::2} at " "
                set {_cooldown} to {_cooldown::1} parsed as an integer
            else if uncolored loop-value contains "Level":
                set {_level::*} to split uncolored loop-value at "⚗"
                set {_level} to {_level::2} parsed as integer

        if {_ability} is set:
            
            if {_ability::2} is "Left Click)":

                if {level::%{_u}%} >= {_level}:

                    if {ability::%{_ability}%::%player's uuid%} is true:
                        set {actionBarSet::%{_u}%} to true
                        send action bar coreGetActionBar(player, "&cThis item has a cooldown!") to player
                        wait 1 second
                        set {actionBarSet::%{_u}%} to false
                        stop trigger

                    else:

                        if abilityCheckOtherActive(player) is false:
                            
                            if {mana::currentMana::%player's uuid%} >= {_mana}:
                                if {_ability} is "Shine":
                                    if abilityCheckShine(player) is not false:
                                        abilityUse(player, {_ability}, {_cooldown}, {_mana})
                                        abilityUseShine(player)
                                else if {_ability} is "Venom":
                                    if abilityCheckVenom(player) is not false:
                                        abilityUse(player, {_ability}, {_cooldown}, {_mana})
                                        abilityUseVenom(player)
                                else if {_ability} is "Bolt":
                                    if abilityCheckBolt(player) is not false:
                                        abilityUse(player, {_ability}, {_cooldown}, {_mana})
                                        abilityUseBolt(player)

                            else:
                                set {actionBarSet::%{_u}%} to true
                                send action bar coreGetActionBar(player, "&cNot enough mana!") to player
                                wait 1 second
                                set {actionBarSet::%{_u}%} to false
                                stop trigger
                        else:
                            set {actionBarSet::%{_u}%} to true
                            send action bar coreGetActionBar(player, "&cYou are already using one ability!") to player
                            wait 1 second
                            set {actionBarSet::%{_u}%} to false
                            stop trigger

                else:
                    set {actionBarSet::%{_u}%} to true
                    send action bar coreGetActionBar(player, "&cNot required level!") to player
                    wait 1 second
                    set {actionBarSet::%{_u}%} to false
                    stop trigger