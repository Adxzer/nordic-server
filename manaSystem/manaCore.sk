function manaRaycast(player: player, length: number, tool: item):

    set {_x} to 0
    set {_l} to 0
    
    loop {_length} times:
        add 1 to {_x}
        add 0.25 to {_l}
        set {_rg%{_x}%} to location {_l} meters infront of {_player}
        set {_rg%{_x}%} to location 1.25 meters above {_rg%{_x}%}

    set {_itemList::*} to ({items::armorItems::*}, {items::dropItems::*}, {items::toolItems::*}, {items::economyItems::*}, {items::consumableItems::*})
    loop {_itemList::*}:
        if uncolored name of loop-value is "Basic Spell":
            set {_basicSpell} to loop-value
        else if uncolored name of loop-value is "Vital Spell":
            set {_vitalSpell} to loop-value
        else if uncolored name of loop-value is "Aesir Flinger":
            set {_aesirFlinger} to loop-value
        else if uncolored name of loop-value is "Transient Flinger":
            set {_transientFlinger} to loop-value
        else if uncolored name of loop-value is "Binary Spell":
            set {_binarySpell} to loop-value
        else if uncolored name of loop-value is "Serrated Staff":
            set {_serratedStaff} to loop-value

    if {_tool} is {_basicSpell}:
        play sound "ENTITY_RAVAGER_ATTACK" with volume 0.1 to {_player}
        set {_rgb1::*} to (rgb(110, 90, 84), rgb(125, 102, 95), rgb(140, 114, 107), rgb(158, 129, 122), rgb(176, 145, 137))
        set {_rgb2::*} to (rgb(71, 62, 59), rgb(87, 76, 72), rgb(102, 89, 84), rgb(117, 102, 96), rgb(133, 116, 109))
        set {_offset::*} to (0, 0, 0)
        set {_radius} to 1.5
    else if {_tool} is {_vitalSpell}:
        play sound "ENTITY_RAVAGER_ATTACK" with volume 0.1 to {_player}
        set {_rgb1::*} to (rgb(60, 89, 31), rgb(72, 107, 36), rgb(82, 122, 40), rgb(91, 135, 45), rgb(99, 148, 49))
        set {_rgb2::*} to (rgb(86, 74, 53), rgb(99, 85, 61), rgb(112, 96, 68), rgb(128, 108, 75), rgb(143, 121, 84))
        set {_offset::*} to (0, 0, 0)
        set {_radius} to 1.5
        set {_pierce} to true
    else if {_tool} is {_aesirFlinger}:
        play sound "ENTITY_WITHER_SHOOT" with volume 0.1 to {_player}
        set {_rgb1::*} to (rgb(22, 125, 132), rgb(28, 145, 153), rgb(33, 164, 173), rgb(252, 162, 131), rgb(252, 179, 154))
        set {_rgb2::*} to (rgb(20, 103, 109), rgb(24, 118, 125), rgb(28, 128, 135), rgb(252, 100, 0), rgb(255, 160, 97))
        set {_offset::*} to (0, 0, 0)
        set {_radius} to 1.5
    else if {_tool} is {_transientFlinger}:
        play sound "ENTITY_SHULKER_SHOOT" with volume 0.2 to {_player}
        set {_rgb1::*} to (rgb(176, 124, 26), rgb(212, 149, 32), rgb(24, 196, 50), rgb(30, 214, 58), rgb(37, 247, 69))
        set {_rgb2::*} to (rgb(209, 163, 75), rgb(227, 177, 82), rgb(57, 212, 81), rgb(60, 230, 86), rgb(66, 252, 94))
        set {_offset::*} to (0, 0, 0)
        set {_radius} to 1.5
    else if {_tool} is {_binarySpell}:
        play sound "ENTITY_BLAZE_SHOOT" with volume 0.1 to {_player}
        set {_rgb1::*} to (rgb(156, 55, 30), rgb(199, 66, 34), rgb(219, 71, 35), rgb(235, 74, 35), rgb(247, 74, 32))
        set {_rgb2::*} to (rgb(19, 20, 20), rgb(36, 38, 38), rgb(51, 54, 54), rgb(45, 46, 46), rgb(38, 38, 38))
        set {_offset::*} to (0, -0.3, 0, 0, 0.3, 0)
        set {_radius} to 2
    else if {_tool} is {_serratedStaff}:
        play sound "ITEM_TRIDENT_THUNDER" with volume 0.1 to {_player}
        set {_rgb1::*} to (rgb(153, 175, 189), rgb(174, 195, 209), rgb(191, 211, 224), rgb(204, 224, 237), rgb(232, 243, 250))
        set {_rgb2::*} to (rgb(58, 126, 166), rgb(62, 137, 181), rgb(66, 150, 199), rgb(71, 161, 214), rgb(73, 172, 230))
        set {_offset::*} to (0, -0.3, 0, 0, 0.3, 0)
        set {_radius} to 2
        set {_pierce} to true

    set {_x} to 0
    loop {_length} times:
        add 1 to {_x}
        
        set {_counter} to 1
        loop 3 times:
            set {_check} to {_counter} * 3
            if {_offset::%{_check}%} is set:

                if {_counter} is 1:
                    remove {_offset::1} from {_rg%{_x}%}'s x coordinate
                    remove {_offset::2} from {_rg%{_x}%}'s y coordinate
                    remove {_offset::3} from {_rg%{_x}%}'s z coordinate
                else if {_counter} is 2:
                    remove {_offset::4} from {_rg%{_x}%}'s x coordinate
                    remove {_offset::5} from {_rg%{_x}%}'s y coordinate
                    remove {_offset::6} from {_rg%{_x}%}'s z coordinate
                else if {_counter} is 3:
                    remove {_offset::7} from {_rg%{_x}%}'s x coordinate
                    remove {_offset::8} from {_rg%{_x}%}'s y coordinate
                    remove {_offset::9} from {_rg%{_x}%}'s z coordinate

                if {_x} >= ({_length} / 10) * 5.5:
                    draw 1 of dust using dustTransition({_rgb1::5}, {_rgb2::5}, 0.8) at {_rg%{_x}%}
                else if {_x} >= ({_length} / 10) * 5:
                    draw 1 of dust using dustTransition({_rgb1::4}, {_rgb2::4}, 0.95) at {_rg%{_x}%}
                else if {_x} >= ({_length} / 10) * 4:
                    draw 1 of dust using dustTransition({_rgb1::3}, {_rgb2::3}, 1.1) at {_rg%{_x}%}
                else if {_x} >= ({_length} / 10) * 3.7:
                    draw 1 of dust using dustTransition({_rgb1::2}, {_rgb2::2}, 1.3) at {_rg%{_x}%}
                else:
                    draw 1 of dust using dustTransition({_rgb1::1}, {_rgb2::1}, 1.5) at {_rg%{_x}%}
            else:
                stop loop
            add 1 to {_counter}
        
        loop entities in radius {_radius} around {_rg%{_x}%}:
            if loop-entity is not {_player}:
                make {_player} damage loop-entity by 0
                if {_tool} is {_aesirFlinger} or {_serratedStaff}:
                    if {_exploded} is not true:
                        set {_exploded} to true
                        draw 1 of explosion at loop-entity
                        play sound "ENTITY_GENERIC_EXPLODE" with volume 0.2 at loop-entity
                    loop all entities in radius 4 of loop-entity:
                        if loop-entity-2 is not player or villager:
                            make {_player} damage loop-entity-2 by 0
                if {_tool} is {_transientFlinger} or {_serratedStaff}:
                    if {_teleport} is not true:
                        set {_teleport} to true
                        play sound "ENTITY_ENDERMAN_TELEPORT" with volume 0.2 at loop-entity
                    loop all entities in radius 5 of loop-entity:
                        if loop-entity-2 is not player or villager:
                            if uncolored name of loop-entity-1 and loop-entity-2 does not contain "BOSS":
                                teleport loop-entity-2 to loop-entity-1

                if {_pierce} is not true:
                    stop
        
        loop blocks in radius 0.5 around {_rg%{_x}%}:
            if loop-block is not tall grass, short grass, snow layer, air or water:
                stop    
    play sound "BLOCK_REDSTONE_TORCH_BURNOUT" with volume 0.1 to {_player}

command /mana [<text>] [<text>] [<text>] [<text>] [<text>]:
    permission: op
    permission message: Unknown command. Type "/help" for help.
    trigger:

        if arg-1 is set:

            if arg-1 is "user":
     
                if arg-2 is set:

                    if arg-2 parsed as offline player is offline player:

                        set {_player} to arg-2 parsed as offline player
                        set {_u} to uuid of {_player}

                        if {level::%{_u}%} is set:

                            if arg-3 is set:

                                if arg-3 is "custom":

                                    if arg-4 is set:

                                        if arg-4 is "set":

                                            if arg-5 is set:

                                                set {_value} to arg-5 parsed as integer

                                                if arg-5 parsed as integer is integer:
                                                    send "&6[MANA] » &fYou set &6%arg-2%&f's max mana to &6%arg-5%&f."
                                                    set {mana::maxMana::%{_u}%} to {_value}
                                                    set {mana::currentMana::%{_u}%} to {mana::maxMana::%{_u}%}
                                                    set {mana::customMana::%{_u}%} to {mana::maxMana::%{_u}%}

                                                else:
                                                    send "&6[MANA] » &cThis argument must be an integer."

                                            else:
                                                send "&6[MANA] » &cPlease specify an integer."
                                        else if arg-4 is "clear":
                                            
                                            if {mana::customMana::%{_u}%} is set:
                                                send "&6[MANA] » &fYou cleared &6%arg-2%&f's custom mana&f."
                                                clear {mana::customMana::%{_u}%}
                                                set {mana::currentMana::%{_u}%} to {mana::maxMana::%{_u}%}

                                            else:
                                                send "&6[MANA] » &cThere is no custom mana for this player."                                            
                                        else if arg-4 is "check":

                                            if {mana::customMana::%{_u}%} is set:
                                                send "&6[MANA] » &fThe custom mana of &c%arg-2%&f is &6%{mana::customMana::%{_u}%}%&f."
                                            
                                            else:
                                                send "&6[MANA] » &cThere is no custom mana for this player."

                                        else:
                                            send "&6[MANA] » &cThis command option does not exist."

                                    else:
                                        send "&6[MANA] » &cThis command option does not exist."
                                else if arg-3 is "regen":
                                    send "&6[MANA] » &fRegenerated &6%arg-2%&f's mana."
                                    set {mana::currentMana::%{_u}%} to {mana::maxMana::%{_u}%}

                                else:
                                    send "&6[MANA] » &cThis command option does not exist."

                            else:
                                send "&6[MANA] » &cPlease specify a command option."

                        else:
                            send "&6[MANA] » &cThis player has never been on the server."

                    else:
                        send "&6[MANA] » &cThis player does not exist."

                else:
                    send "&6[MANA] » &cPlease specify a player."  

            else:
                send "&6[MANA] » &cThis command option does not exist."

        else:
            send "&6[MANA] » &cPlease specify a command option."

on tab complete of "/mana":

    if tab arg-1 is not "user": # add new options  
        clear {_tabCompletion::*}
        set {_tabCompletion::*} to ("user") # add new options
        set tab completions for position 1 to {_tabCompletion::*}

    if tab arg-1 is "user":
        clear {_tabCompletion::*}
        loop players:
            add loop-value to {_tabCompletion::*}
            set tab completions for position 2 to {_tabCompletion::*}

    set {_user} to tab arg-2 parsed as offline player
    set {_u} to uuid of {_user}
    if {level::%{_u}%} is set:
    
        if tab arg-3 is not "regen" or "custom": # add new options 
            clear {_tabCompletion::*}
            set {_tabCompletion::*} to ("regen", "custom") # add new options 
            set tab completions for position 3 to {_tabCompletion::*}

    if tab arg-3 is "custom":
        set {_tabCompletion::*} to ("set", "clear", "check") # add new options 
        set tab completions for position 4 to {_tabCompletion::*}

on rightclick:

    set {_lore::*} to lore of player's tool
    if uncolored {_lore::1} is "Consumable Item.":
        
        cancel event

        set {_u} to uuid of player
        set {_split::*} to split {_lore::4} at " "

        if {_split::3} contains "✦":
        
            set {_num::*} to split uncolored {_split::3} at "✦"
            set {_add} to {_num::1} parsed as integer

            if {mana::currentMana::%{_u}%} is not {mana::maxMana::%{_u}%}:
                
                if {mana::currentMana::%{_u}%} + {_add} is greater than {mana::maxMana::%{_u}%}:
                    set {mana::currentMana::%{_u}%} to {mana::maxMana::%{_u}%}

                else:
                    add {_add} to {mana::currentMana::%{_u}%}

                set {actionBarSet::%{_u}%} to true
                play sound "ENTITY_PLAYER_BURP" with volume 0.2 to player
                send action bar coreGetActionBar(player, "&aYou consumed %uncolored name of player's tool%!") to player
                remove 1 of player's tool from player
                wait 1 second
                set {actionBarSet::%{_u}%} to false

            else:

                set {actionBarSet::%{_u}%} to true
                send action bar coreGetActionBar(player, "&cYou already have max mana!") to player
                wait 1 second
                set {actionBarSet::%{_u}%} to false
    else if uncolored {_lore::1} is "Magical Tool.":

        set {_u} to uuid of player
        set {_lore::*} to lore of player's tool

        loop {_lore::*}:
            if uncolored loop-value contains "Expense":
                set {_splitCost::*} to split uncolored loop-value at "✦"
                set {_cost} to {_splitCost::2} parsed as integer
            else if uncolored loop-value contains "Range":
                set {_splitRange::*} to split uncolored loop-value at " "
                set {_range} to {_splitRange::2} parsed as integer

            else if uncolored loop-value contains "Cooldown":
                set {_splitCooldown::*} to split uncolored loop-value at " "
                set {_cooldown} to {_splitCooldown::2} parsed as integer
            else if loop-value contains "Level":
                set {_level::*} to split uncolored loop-value at "⚗"
                set {_level} to {_level::2}

        if {level::%{_u}%} >= {_level::2} parsed as integer:

            if {mana::currentMana::%{_u}%} >= {_cost}:

                set {_tool} to uncolored name of player's tool
                set {_item} to player's tool

                if {mana::%{_tool}%::cooldown::%{_u}%} is true:
                    set {actionBarSet::%{_u}%} to true
                    send action bar coreGetActionBar(player, "&cThis item has a cooldown!") to player
                    wait 1 second
                    set {actionBarSet::%{_u}%} to false
                    stop trigger

                else:
                    set {mana::%{_tool}%::cooldown::%{_u}%} to true
                    remove {_cost} from {mana::currentMana::%{_u}%}
                    manaRaycast(player, {_range}, {_item})
                    wait "%{_cooldown}% seconds" parsed as timespan
                    set {mana::%{_tool}%::cooldown::%{_u}%} to false

            else:
                set {actionBarSet::%{_u}%} to true
                send action bar coreGetActionBar(player, "&cNot enough mana!") to player
                wait 1 second
                set {actionBarSet::%{_u}%} to false
                stop trigger

        else:
            set {actionBarSet::%{_u}%} to true
            send action bar coreGetActionBar(player, "&cNot required level!") to player
            wait 1 second
            set {actionBarSet::%{_u}%} to false
            stop trigger